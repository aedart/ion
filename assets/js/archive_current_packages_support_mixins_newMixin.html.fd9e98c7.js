"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[1743],{8476:function(n,s,a){a.r(s),a.d(s,{comp:function(){return p},data:function(){return o}});var e=a(641);const t={};var p=(0,a(6262).A)(t,[["render",function(n,s){const a=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[s[7]||(s[7]=(0,e.Lk)("h1",{id:"define-a-new-mixin",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#define-a-new-mixin"},[(0,e.Lk)("span",null,"Define a new Mixin")])],-1)),(0,e.Lk)("p",null,[s[1]||(s[1]=(0,e.eW)("You can use the ")),s[2]||(s[2]=(0,e.Lk)("code",null,"Mixin",-1)),s[3]||(s[3]=(0,e.eW)(" decorator to define a new mixin. Amongst other things, the decorator will enable support for ")),s[4]||(s[4]=(0,e.Lk)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},[(0,e.Lk)("code",null,"instanceof")],-1)),s[5]||(s[5]=(0,e.eW)(" checks. See ")),(0,e.bF)(a,{to:"/archive/current/packages/support/mixins/instanceof.html"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.Lk)("code",null,"instanceof",-1),(0,e.eW)(" Operator")]))),_:1}),s[6]||(s[6]=(0,e.eW)(" for additional information."))]),s[8]||(s[8]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Mixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/mixins&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> RectangleMixin <span class="token operator">=</span> <span class="token function">Mixin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> superclass <span class="token punctuation">{</span></span>\n<span class="line">    length <span class="token operator">=</span> <span class="token number">0</span></span>\n<span class="line">    width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h2><p>If you need to perform initialisation logic in your mixins, then you can do so by implementing a class <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor" target="_blank" rel="noopener noreferrer"><code>constructor</code></a>. When doing so, it is important to invoke the parent constructor via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="noopener noreferrer"><code>super()</code></a> and pass on eventual arguments.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Mixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/mixins&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> RectangleMixin <span class="token operator">=</span> <span class="token function">Mixin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> superclass <span class="token punctuation">{</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Invoke parent constructor and pass on arugments!</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token comment">// Perform your initialisaiton logic...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token comment">// ...remaining not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4))])}]]);const o=JSON.parse('{"path":"/archive/current/packages/support/mixins/newMixin.html","title":"New Mixin","lang":"en-GB","frontmatter":{"title":"New Mixin","description":"How to defined a new Mixin class.","sidebarDepth":0},"headers":[{"level":2,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]}],"git":{"updatedTime":1709288721000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/mixins/newMixin.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);