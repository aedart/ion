"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[7122],{9267:function(n,s,a){a.r(s),a.d(s,{comp:function(){return o},data:function(){return p}});var t=a(641);const e={};var o=(0,a(6262).A)(e,[["render",function(n,s){const a=(0,t.g2)("RouteLink");return(0,t.uX)(),(0,t.CE)("div",null,[s[3]||(s[3]=(0,t.Fv)('<h1 id="isconstructor" tabindex="-1"><a class="header-anchor" href="#isconstructor"><span><code>isConstructor</code></span></a></h1><p>Based on the <a href="https://github.com/caitp/TC39-Proposals/blob/trunk/tc39-reflect-isconstructor-iscallable.md" target="_blank" rel="noopener noreferrer">TC39 <code>Function.isCallable() / Function.isConstructor()</code></a> proposal, the <code>isConstructor()</code> can determine if value is a constructor.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> isConstructor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/reflections&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Built-in objects</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span>Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isConstructor</span><span class="token punctuation">(</span>Set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token comment">// ...etc</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Acknowledgement</strong></p><p>The source code of the above shown methods is heavily inspired by Denis Pushkarev&#39;s Core-js implementation of the <a href="https://github.com/zloirock/core-js#function-iscallable-isconstructor-" target="_blank" rel="noopener noreferrer">Function.isCallable / Function.isConstructor</a> proposal (<em>License MIT</em>).</p>',5)),(0,t.Lk)("p",null,[s[1]||(s[1]=(0,t.eW)("See also ")),(0,t.bF)(a,{to:"/archive/current/packages/support/reflections/isClassConstructor.html"},{default:(0,t.k6)((()=>s[0]||(s[0]=[(0,t.Lk)("code",null,"isClassConstructor()",-1)]))),_:1}),s[2]||(s[2]=(0,t.eW)("."))])])}]]);const p=JSON.parse('{"path":"/archive/current/packages/support/reflections/isConstructor.html","title":"Is Constructor","lang":"en-GB","frontmatter":{"title":"Is Constructor","description":"Determine if value is a constructor.","sidebarDepth":0},"headers":[],"git":{"updatedTime":1710169684000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":3}]},"filePathRelative":"archive/current/packages/support/reflections/isConstructor.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);