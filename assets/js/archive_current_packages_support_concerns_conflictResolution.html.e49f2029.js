"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[157],{9748:function(n,s,a){a.r(s),a.d(s,{comp:function(){return l},data:function(){return i}});var e=a(641);const t={class:"table-of-contents"},p={};var l=(0,a(6262).A)(p,[["render",function(n,s){const a=(0,e.g2)("router-link");return(0,e.uX)(),(0,e.CE)("div",null,[s[4]||(s[4]=(0,e.Lk)("h1",{id:"conflict-resolution",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#conflict-resolution"},[(0,e.Lk)("span",null,"Conflict Resolution")])],-1)),(0,e.Lk)("nav",t,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#naming-conflicts"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.eW)("Naming Conflicts")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#resolve-naming-conflicts"},{default:(0,e.k6)((()=>s[1]||(s[1]=[(0,e.eW)("Resolve Naming Conflicts")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#prevent-aliases"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.eW)("Prevent Aliases")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#shorthand-configuration"},{default:(0,e.k6)((()=>s[3]||(s[3]=[(0,e.eW)("Shorthand Configuration")]))),_:1})])])]),s[5]||(s[5]=(0,e.Fv)('<h2 id="naming-conflicts" tabindex="-1"><a class="header-anchor" href="#naming-conflicts"><span>Naming Conflicts</span></a></h2><p>A concern class may <em><strong>ONLY</strong></em> occur once in a target class&#39; prototype chain. This is a core feature of the concerns mechanism and cannot be circumvented. However, sometimes you may find yourself in situations where different injected concern classes define the same property or method name. When this happens an <code>AliasConflictError</code> is thrown.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Label</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Category</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    Label<span class="token punctuation">,</span></span>\n<span class="line">    Category <span class="token comment">// AliasConflictError: Alias &quot;name&quot; for property ...</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Battery</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resolve-naming-conflicts" tabindex="-1"><a class="header-anchor" href="#resolve-naming-conflicts"><span>Resolve Naming Conflicts</span></a></h2><p>To resolve the previous shown naming conflict, you can specify custom &quot;aliases&quot; when injecting a concern class, via an injection configuration object.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// ... Label and Category concerns not shown ...</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    Label<span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">concern</span><span class="token operator">:</span> Category<span class="token punctuation">,</span></span>\n<span class="line">        <span class="token literal-property property">aliases</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;category&#39;</span> <span class="token comment">// Alias Category&#39;s &quot;name&quot; property as &quot;category&quot;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Battery</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Battery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">instance<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;AAA&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">instance<span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">&#39;Rechargeable&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>aliases</code> option is key-value record, where;</p><ul><li>key = property key in the concern class.</li><li>value = property key (<em>alias</em>) to define in the target class.</li></ul><h2 id="prevent-aliases" tabindex="-1"><a class="header-anchor" href="#prevent-aliases"><span>Prevent Aliases</span></a></h2><p>To prevent a concern class from defining any aliases inside a target class, set the <code>allowAliases</code> option to <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getConcernsContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    Label<span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">concern</span><span class="token operator">:</span> Category<span class="token punctuation">,</span></span>\n<span class="line">        <span class="token literal-property property">allowAliases</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// Category&#39;s &quot;name&quot; is NOT aliased in target</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Battery</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Battery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">instance<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Interact with Category concern to set &quot;name&quot;</span></span>\n<span class="line"><span class="token function">getConcernsContainer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Category<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Rechargeable&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shorthand-configuration" tabindex="-1"><a class="header-anchor" href="#shorthand-configuration"><span>Shorthand Configuration</span></a></h2><p>You can also use a shorthand version to specify a concern injection configuration, via an array. The first array value must always be the concern class that must be injected. The second value can either be an <code>aliases</code> object, or boolean value for setting the <code>allowAliases</code> option.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    Label<span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">[</span>Category<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;category&#39;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Battery</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And to prevent a concern from defining aliases in a target:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    Label<span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">[</span>Category<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Battery</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',16))])}]]);const i=JSON.parse('{"path":"/archive/current/packages/support/concerns/conflictResolution.html","title":"Conflict Resolution","lang":"en-GB","frontmatter":{"title":"Conflict Resolution","description":"How to deal with naming conflicts","sidebarDepth":0},"headers":[{"level":2,"title":"Naming Conflicts","slug":"naming-conflicts","link":"#naming-conflicts","children":[]},{"level":2,"title":"Resolve Naming Conflicts","slug":"resolve-naming-conflicts","link":"#resolve-naming-conflicts","children":[]},{"level":2,"title":"Prevent Aliases","slug":"prevent-aliases","link":"#prevent-aliases","children":[]},{"level":2,"title":"Shorthand Configuration","slug":"shorthand-configuration","link":"#shorthand-configuration","children":[]}],"git":{"updatedTime":1709641376000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/concerns/conflictResolution.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);