"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[7074],{6289:function(n,s,a){a.r(s),a.d(s,{comp:function(){return i},data:function(){return l}});var e=a(641);const t={class:"table-of-contents"},c={class:"hint-container warning"},p={};var i=(0,a(6262).A)(p,[["render",function(n,s){const a=(0,e.g2)("router-link"),p=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[s[22]||(s[22]=(0,e.Lk)("h1",{id:"how-to-use-concerns",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#how-to-use-concerns"},[(0,e.Lk)("span",null,"How to use Concerns")])],-1)),(0,e.Lk)("nav",t,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#using-concerns"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.eW)("Using Concerns")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#inheritance"},{default:(0,e.k6)((()=>s[1]||(s[1]=[(0,e.eW)("Inheritance")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#manual-interaction"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.eW)("Manual interaction")]))),_:1}),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#determine-if-target-uses-concerns"},{default:(0,e.k6)((()=>s[3]||(s[3]=[(0,e.eW)("Determine if target uses concerns")]))),_:1})])])])])]),s[23]||(s[23]=(0,e.Fv)('<h2 id="using-concerns" tabindex="-1"><a class="header-anchor" href="#using-concerns"><span>Using Concerns</span></a></h2><p>The <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noopener noreferrer">class decorator</a> <code>use()</code> is used to inject one or more concern classes into a target class.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    ApiConnection<span class="token punctuation">,</span></span>\n<span class="line">    Serialization<span class="token punctuation">,</span></span>\n<span class="line">    Collections</span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Flight</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3)),(0,e.Lk)("p",null,[s[5]||(s[5]=(0,e.eW)("When concern classes are injected, the target class is transformed and all concerns are made available inside a private ")),s[6]||(s[6]=(0,e.Lk)("code",null,"CONCERNS",-1)),s[7]||(s[7]=(0,e.eW)(" property. See ")),s[8]||(s[8]=(0,e.Lk)("a",{href:"#manual-interaction"},"Manual interaction",-1)),s[9]||(s[9]=(0,e.eW)(" and ")),(0,e.bF)(p,{to:"/archive/current/packages/support/concerns/aliases.html"},{default:(0,e.k6)((()=>s[4]||(s[4]=[(0,e.eW)("Aliases")]))),_:1}),s[10]||(s[10]=(0,e.eW)(" for additional details."))]),s[24]||(s[24]=(0,e.Fv)('<h2 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance"><span>Inheritance</span></a></h2><p>All concerns that are used by a parent class are automatically available (<em>inherited</em>), by child classes.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    ApiConnection<span class="token punctuation">,</span></span>\n<span class="line">    Serialization<span class="token punctuation">,</span></span>\n<span class="line">    Collections</span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Flight</span> <span class="token keyword">extends</span> <span class="token class-name">ApiService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// Uses ApiConnection, Serialization, ...etc</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3)),(0,e.Lk)("div",c,[s[14]||(s[14]=(0,e.Fv)('<p class="hint-container-title">warning</p><p>A concern class may <em><strong>ONLY</strong></em> occur once in a target class&#39; prototype chain. An <code>InjectionError</code> is thrown, if this is violated!</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    ApiConnection<span class="token punctuation">,</span></span>\n<span class="line">    Serialization<span class="token punctuation">,</span></span>\n<span class="line">    Collections</span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Serialization<span class="token punctuation">)</span> <span class="token comment">// InjectionError</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Flight</span> <span class="token keyword">extends</span> <span class="token class-name">ApiService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3)),(0,e.Lk)("p",null,[s[12]||(s[12]=(0,e.eW)("See also ")),(0,e.bF)(p,{to:"/archive/current/packages/support/concerns/conflictResolution.html"},{default:(0,e.k6)((()=>s[11]||(s[11]=[(0,e.eW)("Conflict Resolution")]))),_:1}),s[13]||(s[13]=(0,e.eW)(" for additional details."))])]),s[25]||(s[25]=(0,e.Lk)("h2",{id:"manual-interaction",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#manual-interaction"},[(0,e.Lk)("span",null,"Manual interaction")])],-1)),(0,e.Lk)("p",null,[s[16]||(s[16]=(0,e.eW)('When concerns are injected into a target, they are defined inside a "Concerns Container", which is available in the target instance via the ')),s[17]||(s[17]=(0,e.Lk)("code",null,"CONCERNS",-1)),s[18]||(s[18]=(0,e.eW)(" symbol. Should you require to perform more advanced interaction with a concern class instance, then you can obtain a concern instance via the container's ")),s[19]||(s[19]=(0,e.Lk)("code",null,"get()",-1)),s[20]||(s[20]=(0,e.eW)(" method. It will automatically ensure to ")),(0,e.bF)(p,{to:"/archive/current/packages/support/concerns/booting.html"},{default:(0,e.k6)((()=>s[15]||(s[15]=[(0,e.eW)("boot")]))),_:1}),s[21]||(s[21]=(0,e.eW)(" a concern, if not already booted."))]),s[26]||(s[26]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>\n<span class="line">    use<span class="token punctuation">,</span></span>\n<span class="line">    <span class="token constant">CONCERNS</span><span class="token punctuation">,</span></span>\n<span class="line">    AbstractConcern</span>\n<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Encryption</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown... */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Encryption<span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">CookieStore</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">CONCERNS</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> value <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Encryption<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&#39;Lorum lipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token comment">// ...remaining not shown...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can achieve the same result by using the <code>getContainer()</code> utility method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> use<span class="token punctuation">,</span> getContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// ...Encryption concern not shown...</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Encryption<span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">CookieStore</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Encryption<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&#39;Lorum lipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token comment">// ...remaining not shown...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>CONCERNS symbol, getContainer(), and getConcernsContainer()</summary><p>There are 3 ways to obtain the concerns container instance:</p><p><strong>A) <code>CONCERNS</code> symbol</strong></p><p>Inside your target class, if you know that concerns are used (<em>if target is a &quot;concern owner&quot;</em>), then you can use the <code>CONCERNS</code> symbol to gain access to the container.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CONCERNS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Inside your target class...</span></span>\n<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">CONCERNS</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>B) <code>getContainer()</code></strong></p><p><code>getContainer()</code> is essentially a just a wrapper for: <code>return this[CONCERNS]</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Inside your target class...</span></span>\n<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>C) <code>getConcernsContainer()</code></strong></p><p>The <code>getConcernsContainer()</code> achieves the same result as the previous shown methods. However, it does perform a check of the provided target instance, which ensures that it is a &quot;concern owner&quot;. If the target does not pass this test, then a <code>TypeError</code> is thrown. This might can be useful in situations when you might now know if the target is a concern owner, e.g. when situated in a child class or outside a target class.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getConcernsContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Inside your target class...</span></span>\n<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token function">getConcernsContainer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="determine-if-target-uses-concerns" tabindex="-1"><a class="header-anchor" href="#determine-if-target-uses-concerns"><span>Determine if target uses concerns</span></a></h3><p>To determine if a target uses one or more concerns, use the <code>usesConcerns()</code> method. It accepts the following arguments:</p><ul><li><code>instance: object|Owner</code> - The target class instance.</li><li><code>...concerns: ConcernConstructor[]</code> - Concern classes to test for.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>\n<span class="line">    use<span class="token punctuation">,</span></span>\n<span class="line">    AbstractConcern<span class="token punctuation">,</span></span>\n<span class="line">    usesConcerns</span>\n<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    <span class="token constant">A</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token constant">B</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">usesConcerns</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">usesConcerns</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">usesConcerns</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">usesConcerns</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">usesConcerns</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">usesConcerns</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">usesConcerns</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8))])}]]);const l=JSON.parse('{"path":"/archive/current/packages/support/concerns/usage.html","title":"Using Concerns","lang":"en-GB","frontmatter":{"title":"Using Concerns","description":"How to use concerns.","sidebarDepth":0},"headers":[{"level":2,"title":"Using Concerns","slug":"using-concerns","link":"#using-concerns","children":[]},{"level":2,"title":"Inheritance","slug":"inheritance","link":"#inheritance","children":[]},{"level":2,"title":"Manual interaction","slug":"manual-interaction","link":"#manual-interaction","children":[{"level":3,"title":"Determine if target uses concerns","slug":"determine-if-target-uses-concerns","link":"#determine-if-target-uses-concerns","children":[]}]}],"git":{"updatedTime":1709641376000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/concerns/usage.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);