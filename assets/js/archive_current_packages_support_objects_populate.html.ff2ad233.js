"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[8484],{9202:function(n,s,a){a.r(s),a.d(s,{comp:function(){return i},data:function(){return u}});var e=a(641);const p={id:"populate",tabindex:"-1"},t={class:"header-anchor",href:"#populate"},o={class:"table-of-contents"},l={class:"hint-container tip"},c={};var i=(0,a(6262).A)(c,[["render",function(n,s){const a=(0,e.g2)("Badge"),c=(0,e.g2)("router-link"),i=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",p,[(0,e.Lk)("a",t,[(0,e.Lk)("span",null,[s[0]||(s[0]=(0,e.Lk)("code",null,"populate",-1)),s[1]||(s[1]=(0,e.eW)()),(0,e.bF)(a,{type:"tip",text:"Available since v0.9",vertical:"middle"})])])]),s[11]||(s[11]=(0,e.Lk)("p",null,[(0,e.eW)("The "),(0,e.Lk)("code",null,"populate()"),(0,e.eW)(" allows you to populate a target object's properties with those from a source object. The values are "),(0,e.Lk)("a",{href:"https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy",target:"_blank",rel:"noopener noreferrer"},"shallow copied"),(0,e.eW)(".")],-1)),(0,e.Lk)("nav",o,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(c,{to:"#arguments"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.eW)("Arguments")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(c,{to:"#limit-keys-to-populate"},{default:(0,e.k6)((()=>s[3]||(s[3]=[(0,e.eW)("Limit keys to populate")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(c,{to:"#source-keys-callback"},{default:(0,e.k6)((()=>s[4]||(s[4]=[(0,e.eW)("Source Keys Callback")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(c,{to:"#when-keys-do-not-exist"},{default:(0,e.k6)((()=>s[5]||(s[5]=[(0,e.eW)("When keys do not exist")]))),_:1})])])]),s[12]||(s[12]=(0,e.Fv)('<h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments"><span>Arguments</span></a></h2><p><code>populate()</code> accepts the following arguments:</p><ul><li><p><code>target: object</code></p></li><li><p><code>source: object</code></p></li><li><p><code>keys: PropertyKey | PropertyKey[] | SourceKeysCallback = &#39;*&#39;</code> - The keys to select and copy from <code>source</code> object. If wildcard (<code>*</code>) given, then all properties from the <code>source</code> are selected. If a callback is given, then that callback must return key or keys to select from <code>source</code>.</p></li><li><p><code>safe: boolean = true</code> - When <code>true</code>, properties must exist in target (<em>must be defined in target</em>), before they are shallow copied.</p></li></ul><div class="hint-container warning"><p class="hint-container-title">Caution</p><p>The <code>target</code> object is mutated by this function.</p></div>',4)),(0,e.Lk)("div",l,[s[10]||(s[10]=(0,e.Lk)("p",{class:"hint-container-title"},"Note",-1)),(0,e.Lk)("p",null,[(0,e.bF)(i,{to:"/archive/current/packages/support/reflections/isKeyUnsafe.html"},{default:(0,e.k6)((()=>s[6]||(s[6]=[(0,e.eW)('"Unsafe" properties')]))),_:1}),s[7]||(s[7]=(0,e.eW)(" are disregarded, regardless of what ")),s[8]||(s[8]=(0,e.Lk)("code",null,"keys",-1)),s[9]||(s[9]=(0,e.eW)(" are given."))])]),s[13]||(s[13]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> populate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/objects&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>\n<span class="line">    name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">    age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">populate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Janine&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">36</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">instance<span class="token punctuation">.</span>name <span class="token comment">// Janine</span></span>\n<span class="line">instance<span class="token punctuation">.</span>age <span class="token comment">// 36</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="limit-keys-to-populate" tabindex="-1"><a class="header-anchor" href="#limit-keys-to-populate"><span>Limit keys to populate</span></a></h2><p>By default, all keys (<em><code>*</code></em>) from the <code>source</code> object are attempted populated into the <code>target</code>. You can limit what properties can be populated, by specifying what keys are allowed to be populated.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>\n<span class="line">    name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">    age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">    phone <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">populate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Janine&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">&#39;555 555 555&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">instance<span class="token punctuation">.</span>name <span class="token comment">// Janine</span></span>\n<span class="line">instance<span class="token punctuation">.</span>age <span class="token comment">// 36</span></span>\n<span class="line">instance<span class="token punctuation">.</span>phone <span class="token comment">// null</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="source-keys-callback" tabindex="-1"><a class="header-anchor" href="#source-keys-callback"><span>Source Keys Callback</span></a></h2><p>If you need a more advanced way to determine what keys to populate, then you can specify a callback as the <code>keys</code> argument.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">populate</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">&#39;phone&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;phone&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;phone&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="when-keys-do-not-exist" tabindex="-1"><a class="header-anchor" href="#when-keys-do-not-exist"><span>When keys do not exist</span></a></h2><p>When the <code>safe</code> argument is set to <code>true</code> (<em>default behavior</em>), and a property key does not exist in the <code>target</code> object, then a <code>TypeError</code> is thrown.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>\n<span class="line">    name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">    age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">populate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;phone&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Janine&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">&#39;555 555 555&#39;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError - phone does not exist in target </span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, if a requested key does not exist in the source object, then a <code>TypeError</code> is thrown regardless of the <code>safe</code> argument value.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>\n<span class="line">    name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">    age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">populate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;phone&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Janine&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">36</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError - phone does not exist in source </span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',12))])}]]);const u=JSON.parse('{"path":"/archive/current/packages/support/objects/populate.html","title":"Populate","lang":"en-GB","frontmatter":{"title":"Populate","description":"Populate target object.","sidebarDepth":0},"headers":[{"level":2,"title":"Arguments","slug":"arguments","link":"#arguments","children":[]},{"level":2,"title":"Limit keys to populate","slug":"limit-keys-to-populate","link":"#limit-keys-to-populate","children":[]},{"level":2,"title":"Source Keys Callback","slug":"source-keys-callback","link":"#source-keys-callback","children":[]},{"level":2,"title":"When keys do not exist","slug":"when-keys-do-not-exist","link":"#when-keys-do-not-exist","children":[]}],"git":{"updatedTime":1709649075000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":2}]},"filePathRelative":"archive/current/packages/support/objects/populate.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);