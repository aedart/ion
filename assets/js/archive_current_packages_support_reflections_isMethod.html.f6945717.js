"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[2733],{7443:function(n,s,a){a.r(s),a.d(s,{comp:function(){return l},data:function(){return c}});var e=a(641);const t={id:"ismethod",tabindex:"-1"},p={class:"header-anchor",href:"#ismethod"},o={};var l=(0,a(6262).A)(o,[["render",function(n,s){const a=(0,e.g2)("Badge"),o=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",p,[(0,e.Lk)("span",null,[s[0]||(s[0]=(0,e.Lk)("code",null,"isMethod",-1)),s[1]||(s[1]=(0,e.eW)()),(0,e.bF)(a,{type:"tip",text:"Available since v0.11",vertical:"middle"})])])]),s[5]||(s[5]=(0,e.Fv)('<p>Determine if property (<em>name</em>) is a method in given target object.</p><p>It accepts the following arguments:</p><ul><li><code>target: object</code> - The target.</li><li><code>property: PropertyKey</code> - Name of property.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> isMethod <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aedart/support/reflections&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span></span>\n<span class="line">    age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></span>\n<span class="line">    </span>\n<span class="line">    #title <span class="token operator">=</span> <span class="token string">&#39;AAA&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#title<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    #job <span class="token operator">=</span> <span class="token string">&#39;AAA&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>#job <span class="token operator">=</span> v<span class="token punctuation">;</span> </span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown... */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">isMethod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isMethod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isMethod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;job&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isMethod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)),(0,e.Lk)("p",null,[s[3]||(s[3]=(0,e.eW)("See also ")),(0,e.bF)(o,{to:"/archive/current/packages/support/reflections/hasMethod.html"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.Lk)("code",null,"hasMethod()",-1)]))),_:1}),s[4]||(s[4]=(0,e.eW)("."))])])}]]);const c=JSON.parse('{"path":"/archive/current/packages/support/reflections/isMethod.html","title":"Is Method","lang":"en-GB","frontmatter":{"title":"Is Method","description":"Determine if property is a method in target","sidebarDepth":0},"headers":[],"git":{"updatedTime":1710155509000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/reflections/isMethod.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);