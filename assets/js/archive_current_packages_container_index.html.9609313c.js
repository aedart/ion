"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[3255],{8337:function(n,s,a){a.r(s),a.d(s,{comp:function(){return o},data:function(){return c}});var e=a(641);const t={id:"introduction",tabindex:"-1"},i={class:"header-anchor",href:"#introduction"},p={};var o=(0,a(6262).A)(p,[["render",function(n,s){const a=(0,e.g2)("Badge");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",i,[(0,e.Lk)("span",null,[s[0]||(s[0]=(0,e.eW)("Introduction ")),(0,e.bF)(a,{type:"tip",text:"Available since v0.11",vertical:"middle"}),(0,e.bF)(a,{type:"success",text:"Browser",vertical:"middle"})])])]),s[1]||(s[1]=(0,e.Fv)('<p>The <code>@aedart/container</code> package offers an adaptation of <a href="https://laravel.com/docs/11.x/container" target="_blank" rel="noopener noreferrer">Laravel&#39;s Service Container</a> (<em>originally licensed under <a href="https://github.com/laravel/framework/blob/11.x/src/Illuminate/Container/LICENSE.md" target="_blank" rel="noopener noreferrer">MIT</a></em>).</p><p>The tools provided by this package give you a way to:</p><ul><li>Manage class dependencies</li><li>Perform <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener noreferrer">dependency injection</a></li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><h3 id="bindings" tabindex="-1"><a class="header-anchor" href="#bindings"><span>Bindings</span></a></h3><p>Imagine that you have an Api client (<em>or any component for that matter</em>). Whenever it is needed, you want it to be injected into components that depend on it.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ApiClient</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...implementation not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To ensure that dependency injection can be performed, you must first bind the component in the service container. Each binding requires a unique identifier, e.g. a string, symbol, number...etc.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/container&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ApiClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@acme/api&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Bind &#39;my_api_client&#39; to the ApiClient component...</span></span>\n<span class="line"><span class="token function">container</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;my_api_client&#39;</span><span class="token punctuation">,</span> ApiClient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="define-dependencies" tabindex="-1"><a class="header-anchor" href="#define-dependencies"><span>Define Dependencies</span></a></h3><p>To define the dependencies of a component, use the <code>dependencies()</code> decorator. By itself, the decorator does not do anything more than to associate a component with one or more dependencies (<em>binding identifiers</em>). In other words, the decorator <em><strong>does not automatically inject</strong></em> anything into your class. It only registers the dependencies as <a href="../support/meta">metadata</a> onto a class.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> dependencies <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/container&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token string">&#39;my_api_client&#39;</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    apiClient<span class="token punctuation">;</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>apiClient <span class="token operator">=</span> client<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token comment">// ...remaining not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve"><span>Resolve</span></a></h3><p>When you want to resolve a component, with all of its dependencies injected into it, use the service container&#39;s <code>make()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/container&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> BookService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@acme/app/services&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> bookService <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>BookService<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bookService<span class="token punctuation">.</span>apiClient<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ApiClient</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onward" tabindex="-1"><a class="header-anchor" href="#onward"><span>Onward</span></a></h3><p>The above shown example illustrates the most basic usage of the service container. Throughout the remaining of this package&#39;s documentation, more examples and use-cases are covered.</p>',17))])}]]);const c=JSON.parse('{"path":"/archive/current/packages/container/","title":"Introduction","lang":"en-GB","frontmatter":{"title":"Introduction","description":"Ion Service Container package","sidebarDepth":0},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[{"level":3,"title":"Bindings","slug":"bindings","link":"#bindings","children":[]},{"level":3,"title":"Define Dependencies","slug":"define-dependencies","link":"#define-dependencies","children":[]},{"level":3,"title":"Resolve","slug":"resolve","link":"#resolve","children":[]},{"level":3,"title":"Onward","slug":"onward","link":"#onward","children":[]}]}],"git":{"updatedTime":1712565593000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":3}]},"filePathRelative":"archive/current/packages/container/README.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);