"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[7321],{8592:function(n,s,a){a.r(s),a.d(s,{comp:function(){return o},data:function(){return i}});var p=a(641);const t={id:"callback-wrapper",tabindex:"-1"},e={class:"header-anchor",href:"#callback-wrapper"},l={class:"table-of-contents"},c={};var o=(0,a(6262).A)(c,[["render",function(n,s){const a=(0,p.g2)("Badge"),c=(0,p.g2)("router-link");return(0,p.uX)(),(0,p.CE)("div",null,[(0,p.Lk)("h1",t,[(0,p.Lk)("a",e,[(0,p.Lk)("span",null,[s[0]||(s[0]=(0,p.eW)("Callback Wrapper ")),(0,p.bF)(a,{type:"tip",text:"Available since v0.11",vertical:"middle"})])])]),s[10]||(s[10]=(0,p.Fv)('<p>The <code>CallbackWrapper</code> objects offers a convenient way to wrap a callable function.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CallbackWrapper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;Hi there...&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Later in your application</span></span>\n<span class="line"><span class="token function">wrapped</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi there...</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2)),(0,p.Lk)("nav",l,[(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#call"},{default:(0,p.k6)((()=>s[1]||(s[1]=[(0,p.eW)("Call")]))),_:1})]),(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#arguments"},{default:(0,p.k6)((()=>s[2]||(s[2]=[(0,p.eW)("Arguments")]))),_:1}),(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#via-make"},{default:(0,p.k6)((()=>s[3]||(s[3]=[(0,p.eW)("Via make()")]))),_:1})]),(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#via-with"},{default:(0,p.k6)((()=>s[4]||(s[4]=[(0,p.eW)("Via with()")]))),_:1})]),(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#via-arguments"},{default:(0,p.k6)((()=>s[5]||(s[5]=[(0,p.eW)("Via arguments")]))),_:1})])])]),(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#binding"},{default:(0,p.k6)((()=>s[6]||(s[6]=[(0,p.eW)("Binding")]))),_:1}),(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#binding-vs-arrow-function"},{default:(0,p.k6)((()=>s[7]||(s[7]=[(0,p.eW)("Binding vs. Arrow Function")]))),_:1})])])]),(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#misc"},{default:(0,p.k6)((()=>s[8]||(s[8]=[(0,p.eW)("Misc.")]))),_:1}),(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[(0,p.bF)(c,{to:"#custom-callback-wrapper"},{default:(0,p.k6)((()=>s[9]||(s[9]=[(0,p.eW)("Custom Callback Wrapper")]))),_:1})])])])])]),s[11]||(s[11]=(0,p.Fv)('<h2 id="call" tabindex="-1"><a class="header-anchor" href="#call"><span>Call</span></a></h2><p>The <code>call()</code> method invokes the wrapped callback and returns its eventual output.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">wrapped</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments"><span>Arguments</span></a></h2><p>There are several ways to specify arguments that must be applied for the wrapped callback, when <code>call()</code> is invoked.</p><h3 id="via-make" tabindex="-1"><a class="header-anchor" href="#via-make"><span>Via <code>make()</code></span></a></h3><p>The static <code>make()</code> method allows you to specify arguments right away. This is useful, if you already know the arguments.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">firstname<span class="token punctuation">,</span> lastname</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Timmy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jackson&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">wrapped</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi Timmy Jackson</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-with" tabindex="-1"><a class="header-anchor" href="#via-with"><span>Via <code>with()</code></span></a></h3><p>In situations when you must add additional arguments, e.g. because you might not know all arguments up front, then you can use the <code>with()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">firstname<span class="token punctuation">,</span> lastname</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Siw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">wrapped</span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">&#39;Orion&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi Siw Orion</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-arguments" tabindex="-1"><a class="header-anchor" href="#via-arguments"><span>Via <code>arguments</code></span></a></h3><p>Lastly, in situations when you must completely overwrite all arguments, then you can specify them via the <code>arguments</code> property.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">firstname<span class="token punctuation">,</span> lastname</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">wrapped<span class="token punctuation">.</span>arguments <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;Alpha&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Zero&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token function">wrapped</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi Alpha Zero</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="binding" tabindex="-1"><a class="header-anchor" href="#binding"><span>Binding</span></a></h2><p>Use <code>bind()</code> to specify the callback&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener noreferrer"><code>this</code> value</a>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">wrapped</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">&#39;Akari&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi Akari</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binding-vs-arrow-function" tabindex="-1"><a class="header-anchor" href="#binding-vs-arrow-function"><span>Binding vs. Arrow Function</span></a></h3><div class="hint-container warning"><p class="hint-container-title">warning</p><p>It is not possible to apply a binding on an arrow function callback. Doing so can result in a <code>TypeError</code> or other unexpected behaviour. See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener noreferrer">Mozilla&#39;s documentation</a> for additional information.</p><p><strong><em>❌</em></strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Callback Wrapper for arrow function...</span></span>\n<span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown ...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">wrapped</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>✔️</em></strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Callback Wrapper for normal function...</span></span>\n<span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown ...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">wrapped</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="misc" tabindex="-1"><a class="header-anchor" href="#misc"><span>Misc.</span></a></h2><p>If you need to determine if a value is a &quot;callback wrapper&quot; object, then you can use the <code>isCallbackWrapper()</code> util.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> isCallbackWrapper<span class="token punctuation">,</span> CallbackWrapper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">isCallbackWrapper</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isCallbackWrapper</span><span class="token punctuation">(</span>CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-callback-wrapper" tabindex="-1"><a class="header-anchor" href="#custom-callback-wrapper"><span>Custom Callback Wrapper</span></a></h3><p><code>isCallbackWrapper()</code> can also accept custom implementation of a callback wrapper.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Custom implementation of a callback wrapper</span></span>\n<span class="line"><span class="token keyword">const</span> custom <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;callback&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* not shown */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;binding&#39;</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;arguments&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;with&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* not shown */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;hasArguments&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* not shown */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;bind&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* not shown */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;hasBinding&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* not shown */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;call&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* not shown */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">isCallbackWrapper</span><span class="token punctuation">(</span>custom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>See the source code of <code>isCallbackWrapper()</code> for additional details.</em></p>',26))])}]]);const i=JSON.parse('{"path":"/archive/current/packages/support/CallbackWrapper.html","title":"Callback Wrapper","lang":"en-GB","frontmatter":{"title":"Callback Wrapper","description":"Wrapper object for a callback","sidebarDepth":0},"headers":[{"level":2,"title":"Call","slug":"call","link":"#call","children":[]},{"level":2,"title":"Arguments","slug":"arguments","link":"#arguments","children":[{"level":3,"title":"Via make()","slug":"via-make","link":"#via-make","children":[]},{"level":3,"title":"Via with()","slug":"via-with","link":"#via-with","children":[]},{"level":3,"title":"Via arguments","slug":"via-arguments","link":"#via-arguments","children":[]}]},{"level":2,"title":"Binding","slug":"binding","link":"#binding","children":[{"level":3,"title":"Binding vs. Arrow Function","slug":"binding-vs-arrow-function","link":"#binding-vs-arrow-function","children":[]}]},{"level":2,"title":"Misc.","slug":"misc","link":"#misc","children":[{"level":3,"title":"Custom Callback Wrapper","slug":"custom-callback-wrapper","link":"#custom-callback-wrapper","children":[]}]}],"git":{"updatedTime":1710238944000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/CallbackWrapper.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);