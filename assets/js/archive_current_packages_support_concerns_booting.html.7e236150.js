"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[4149],{3465:function(n,s,a){a.r(s),a.d(s,{comp:function(){return c},data:function(){return o}});var e=a(641);const t={class:"hint-container warning"},p={};var c=(0,a(6262).A)(p,[["render",function(n,s){const a=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[s[4]||(s[4]=(0,e.Fv)('<h1 id="booting" tabindex="-1"><a class="header-anchor" href="#booting"><span>Booting</span></a></h1><p>By default, a concern class is <em>ONLY</em> instantiated when you interact with its properties or methods, which have been &quot;aliased&quot; into a target class (<em>aka. <a href="https://en.wikipedia.org/wiki/Lazy_initialization" target="_blank" rel="noopener noreferrer">lazy booting</a></em>).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ContactsApi</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown here... */</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>ContactsApi<span class="token punctuation">)</span> <span class="token comment">// Concern is NOT instantiated</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">UsersRegistry</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>users<span class="token punctuation">;</span> <span class="token comment">// Concern is instantiated</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="manual-booting" tabindex="-1"><a class="header-anchor" href="#manual-booting"><span>Manual Booting</span></a></h2><p>You can use the <code>bootConcerns()</code> utility to manually boot concerns. It accepts the following arguments:</p><ul><li><code>instance: object|Owner</code> - The target class instance that uses the concerns.</li><li><code>...concerns: ConcernConstructor[]</code> - List of concern classes to instantiate (<em>aka. boot</em>).</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> use<span class="token punctuation">,</span> bootConcerns <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    ConcernA<span class="token punctuation">,</span></span>\n<span class="line">    ConcernB<span class="token punctuation">,</span></span>\n<span class="line">    ConcernC<span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">bootConcerns</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ConcernA<span class="token punctuation">,</span> ConcernB<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ConcernA and ConcernB are instantiated</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7)),(0,e.Lk)("div",t,[s[3]||(s[3]=(0,e.Fv)('<p class="hint-container-title">warning</p><p>If you attempt to boot a concern that has already been booted, a <code>BootError</code> will be thrown!</p><p>To determine if a concern has already been booted, use the concern container&#39;s <code>hasBooted()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>\n<span class="line">    getContainer<span class="token punctuation">,</span></span>\n<span class="line">    bootConcerns</span>\n<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Record</span> <span class="token keyword">extends</span> <span class="token class-name">ApiService</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasBooted</span><span class="token punctuation">(</span>ApiConnection<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token function">bootConcerns</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ApiConnection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)),(0,e.Lk)("p",null,[s[1]||(s[1]=(0,e.eW)("See ")),(0,e.bF)(a,{to:"/archive/current/packages/support/concerns/usage.html#manual-interaction"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.eW)("Manual interaction")]))),_:1}),s[2]||(s[2]=(0,e.eW)(" for details."))])]),s[5]||(s[5]=(0,e.Fv)('<h3 id="boot-all-concerns" tabindex="-1"><a class="header-anchor" href="#boot-all-concerns"><span>Boot All Concerns</span></a></h3><p>If you wish to boot all concerns, use the <code>bootAllConcerns()</code> utility.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> use<span class="token punctuation">,</span> bootAllConcerns <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    ConcernA<span class="token punctuation">,</span></span>\n<span class="line">    ConcernB<span class="token punctuation">,</span></span>\n<span class="line">    ConcernC<span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">bootAllConcerns</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// All concerns are initialised</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3))])}]]);const o=JSON.parse('{"path":"/archive/current/packages/support/concerns/booting.html","title":"Booting","lang":"en-GB","frontmatter":{"title":"Booting","description":"How concerns are booted","sidebarDepth":0},"headers":[{"level":2,"title":"Manual Booting","slug":"manual-booting","link":"#manual-booting","children":[{"level":3,"title":"Boot All Concerns","slug":"boot-all-concerns","link":"#boot-all-concerns","children":[]}]}],"git":{"updatedTime":1709641376000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/concerns/booting.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);