"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[1725],{5234:function(n,s,a){a.r(s),a.d(s,{comp:function(){return l},data:function(){return o}});var e=a(641);const t={class:"table-of-contents"},p={};var l=(0,a(6262).A)(p,[["render",function(n,s){const a=(0,e.g2)("router-link"),p=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[s[17]||(s[17]=(0,e.Lk)("h1",{id:"aliases",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#aliases"},[(0,e.Lk)("span",null,"Aliases")])],-1)),s[18]||(s[18]=(0,e.Lk)("p",null,[(0,e.eW)('In this context, an "alias" is a proxy property or method inside a target class. It is responsible for forwarding interaction to the original property or method, inside the concern class instance. Aliases are created automatically by the '),(0,e.Lk)("code",null,"use()"),(0,e.eW)(" class decorator.")],-1)),(0,e.Lk)("nav",t,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#properties-methods"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.eW)("Properties & Methods")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#if-property-or-method-already-exists"},{default:(0,e.k6)((()=>s[1]||(s[1]=[(0,e.eW)("If property or method already exists")]))),_:1})])])]),s[19]||(s[19]=(0,e.Lk)("h2",{id:"properties-methods",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#properties-methods"},[(0,e.Lk)("span",null,"Properties & Methods")])],-1)),(0,e.Lk)("p",null,[s[5]||(s[5]=(0,e.eW)('When injecting a concern into a target class, the concern\'s public properties and methods are defined as "aliases" (')),s[6]||(s[6]=(0,e.Lk)("em",null,"aka. proxy properties or methods",-1)),s[7]||(s[7]=(0,e.eW)("), in the target class' prototype (")),(0,e.Lk)("em",null,[s[3]||(s[3]=(0,e.eW)("see ")),(0,e.bF)(p,{to:"/archive/current/packages/support/concerns/concernClass.html#customise-alias-members"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.Lk)("code",null,"PROVIDES",-1),(0,e.eW)(" symbol")]))),_:1}),s[4]||(s[4]=(0,e.eW)(" for additional details"))]),s[8]||(s[8]=(0,e.eW)(")."))]),s[20]||(s[20]=(0,e.Fv)('<p>Consider the following example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> use<span class="token punctuation">,</span> AbstractConcern <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Levels</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Levels<span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Recorder</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The aliasing mechanism will transform the target class into something that <em><strong>very roughly</strong></em> corresponds to this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>\n<span class="line">    use<span class="token punctuation">,</span></span>\n<span class="line">    <span class="token constant">CONCERNS</span><span class="token punctuation">,</span></span>\n<span class="line">    AbstractConcern</span>\n<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Levels</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token parameter">level</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Recorder</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...private concerns container not shown...</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment">// get level &quot;alias&quot;</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">CONCERNS</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Levels<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;level&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment">// set level &quot;alias&quot;</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">CONCERNS</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Levels<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;level&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment">// method clear &quot;alias&quot;</span></span>\n<span class="line">    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">CONCERNS</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Levels<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;clear&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)),(0,e.Lk)("p",null,[s[11]||(s[11]=(0,e.eW)("See ")),(0,e.bF)(p,{to:"/archive/current/packages/support/concerns/usage.html#manual-interaction"},{default:(0,e.k6)((()=>s[9]||(s[9]=[(0,e.eW)("Manual interaction")]))),_:1}),s[12]||(s[12]=(0,e.eW)(" and ")),(0,e.bF)(p,{to:"/archive/current/packages/support/concerns/conflictResolution.html"},{default:(0,e.k6)((()=>s[10]||(s[10]=[(0,e.eW)("Conflict Resolution")]))),_:1}),s[13]||(s[13]=(0,e.eW)(" for additional details."))]),s[21]||(s[21]=(0,e.Fv)('<h2 id="if-property-or-method-already-exists" tabindex="-1"><a class="header-anchor" href="#if-property-or-method-already-exists"><span>If property or method already exists</span></a></h2><p>When a property or method from a concern already exists in the target class&#39; prototype chain¹, then <strong>NO Alias</strong> is defined. Said differently, the <code>use()</code> class decorator does <strong>NOT</strong> overwrite a target class&#39; properties or methods.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Label</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Label<span class="token punctuation">)</span> <span class="token comment">// Label&#39;s &quot;name&quot; property is NOT aliased</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Battery</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment">// Battery&#39;s get/set &quot;name&quot; remains untouched by concern</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>¹: <em>Inherited properties and methods are also respected.</em></p>',4)),(0,e.Lk)("p",null,[s[15]||(s[15]=(0,e.eW)("See ")),(0,e.bF)(p,{to:"/archive/current/packages/support/concerns/conflictResolution.html"},{default:(0,e.k6)((()=>s[14]||(s[14]=[(0,e.eW)("Conflict Resolution")]))),_:1}),s[16]||(s[16]=(0,e.eW)(" for additional details."))])])}]]);const o=JSON.parse('{"path":"/archive/current/packages/support/concerns/aliases.html","title":"Aliases","lang":"en-GB","frontmatter":{"title":"Aliases","description":"What are aliases","sidebarDepth":0},"headers":[{"level":2,"title":"Properties & Methods","slug":"properties-methods","link":"#properties-methods","children":[]},{"level":2,"title":"If property or method already exists","slug":"if-property-or-method-already-exists","link":"#if-property-or-method-already-exists","children":[]}],"git":{"updatedTime":1709641376000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/concerns/aliases.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);