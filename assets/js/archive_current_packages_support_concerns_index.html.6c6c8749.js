"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[8673],{6153:function(n,s,a){a.r(s),a.d(s,{comp:function(){return i},data:function(){return c}});var e=a(641);const t={id:"about-concerns",tabindex:"-1"},p={class:"header-anchor",href:"#about-concerns"},o={};var i=(0,a(6262).A)(o,[["render",function(n,s){const a=(0,e.g2)("Badge"),o=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",p,[(0,e.Lk)("span",null,[s[0]||(s[0]=(0,e.eW)("About Concerns ")),(0,e.bF)(a,{type:"tip",text:"Available since v0.9",vertical:"middle"})])])]),s[4]||(s[4]=(0,e.Fv)('<p>Inspired by PHP&#39;s <a href="https://www.php.net/manual/en/language.oop5.traits.php" target="_blank" rel="noopener noreferrer">Traits</a>, traditional <a href="https://javascript.info/mixins" target="_blank" rel="noopener noreferrer">mixins</a>, and a few concepts from <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener noreferrer">dependency injection</a>, the <code>@aedart/support/concerns</code> submodule offers an alternative approach to reducing some of the limitations of <a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)#Types" target="_blank" rel="noopener noreferrer">single inheritance</a>.</p><p>In this context, a &quot;concern&quot; is a class that can be injected into a target class, by means of the <code>use()</code> class decorator. The public properties and methods of the concern class are then <em>&quot;aliased&quot;</em> into the target class&#39; prototype. In other words, &quot;proxy&quot; properties and methods are defined in the target class. They forward any interaction to the original properties and methods in the concern class instance.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> use<span class="token punctuation">,</span> AbstractConcern <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// A concern class...</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">ConsolePrinter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Taget class that uses a concern...</span></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>ConsolePrinter<span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Call method in concern</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Later in your application...</span></span>\n<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;Atrid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi Astrid</span></span>\n<span class="line"></span>\n<span class="line">person<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Ho ho ho...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ho ho ho...</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)),(0,e.Lk)("p",null,[s[2]||(s[2]=(0,e.eW)("See also ")),(0,e.bF)(o,{to:"/archive/current/packages/support/mixins/"},{default:(0,e.k6)((()=>s[1]||(s[1]=[(0,e.eW)('"Real" mixins')]))),_:1}),s[3]||(s[3]=(0,e.eW)(" as an alternative."))])])}]]);const c=JSON.parse('{"path":"/archive/current/packages/support/concerns/","title":"About Concerns","lang":"en-GB","frontmatter":{"title":"About Concerns","description":"Alternative mixin utility.","sidebarDepth":0},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"git":{"updatedTime":1709647122000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":2}]},"filePathRelative":"archive/current/packages/support/concerns/README.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);