"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[8216],{4547:function(n,s,a){a.r(s),a.d(s,{comp:function(){return r},data:function(){return u}});var e=a(641);const p={id:"merge",tabindex:"-1"},t={class:"header-anchor",href:"#merge"},o={class:"table-of-contents"},l={id:"arraymergeoptions",tabindex:"-1"},c={class:"header-anchor",href:"#arraymergeoptions"},i={};var r=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,e.g2)("Badge"),i=(0,e.g2)("router-link"),r=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",p,[(0,e.Lk)("a",t,[(0,e.Lk)("span",null,[s[0]||(s[0]=(0,e.Lk)("code",null,"merge",-1)),s[1]||(s[1]=(0,e.eW)()),(0,e.bF)(a,{type:"tip",text:"Available since v0.9",vertical:"middle"})])])]),s[34]||(s[34]=(0,e.Lk)("p",null,[(0,e.eW)("Merges objects recursively into a new object. The properties and values of the source objects are copied, using "),(0,e.Lk)("a",{href:"https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy",target:"_blank",rel:"noopener noreferrer"},"deep copy techniques"),(0,e.eW)(", when possible. Behind the scene, most value types are deep copied via "),(0,e.Lk)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone",target:"_blank",rel:"noopener noreferrer"},[(0,e.Lk)("code",null,"structuredClone")]),(0,e.eW)(".")],-1)),(0,e.Lk)("nav",o,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#shallow-copied-types"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.eW)("Shallow Copied Types")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#unsafe-keys"},{default:(0,e.k6)((()=>s[3]||(s[3]=[(0,e.eW)("Unsafe Keys")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#merge-options"},{default:(0,e.k6)((()=>s[4]||(s[4]=[(0,e.eW)("Merge Options")]))),_:1}),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#depth"},{default:(0,e.k6)((()=>s[5]||(s[5]=[(0,e.eW)("depth")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#skip"},{default:(0,e.k6)((()=>s[6]||(s[6]=[(0,e.eW)("skip")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#overwritewithundefined"},{default:(0,e.k6)((()=>s[7]||(s[7]=[(0,e.eW)("overwriteWithUndefined")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#usecloneable"},{default:(0,e.k6)((()=>s[8]||(s[8]=[(0,e.eW)("useCloneable")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#mergearrays"},{default:(0,e.k6)((()=>s[9]||(s[9]=[(0,e.eW)("mergeArrays")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#arraymergeoptions"},{default:(0,e.k6)((()=>[s[10]||(s[10]=(0,e.eW)("arrayMergeOptions ")),(0,e.bF)(a,{type:"tip",text:"Available since v0.11",vertical:"middle"})])),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(i,{to:"#callback"},{default:(0,e.k6)((()=>s[11]||(s[11]=[(0,e.eW)("callback")]))),_:1})])])])])]),s[35]||(s[35]=(0,e.Fv)('<p><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/objects&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;address&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;street&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Somewhere Street 43&#39;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above shown example results in a new object that looks like this:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Somewhere Street 43&quot;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shallow-copied-types" tabindex="-1"><a class="header-anchor" href="#shallow-copied-types"><span>Shallow Copied Types</span></a></h2><p>Be default, the following value types are only <a href="https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy" target="_blank" rel="noopener noreferrer">shallow copied</a>:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noopener noreferrer">function</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener noreferrer">Symbol</a></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token string-property property">&#39;bar&#39;</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;my_symbol&#39;</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>foo <span class="token operator">===</span> b<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>bar <span class="token operator">===</span> a<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unsafe-keys" tabindex="-1"><a class="header-anchor" href="#unsafe-keys"><span>Unsafe Keys</span></a></h2><p>Property keys that are considered &quot;unsafe&quot;, are never copied.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;is_admin&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;foo&#39;: &#39;bar&#39; }</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">&#39;__proto__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',11)),(0,e.Lk)("p",null,[(0,e.Lk)("em",null,[s[13]||(s[13]=(0,e.eW)("See ")),(0,e.bF)(r,{to:"/archive/current/packages/support/reflections/isKeyUnsafe.html"},{default:(0,e.k6)((()=>s[12]||(s[12]=[(0,e.Lk)("code",null,"isUnsafeKey()",-1)]))),_:1}),s[14]||(s[14]=(0,e.eW)(" for additional details."))])]),s[36]||(s[36]=(0,e.Fv)('<h2 id="merge-options" tabindex="-1"><a class="header-anchor" href="#merge-options"><span>Merge Options</span></a></h2><p><code>merge()</code> supports a number of options. To specify thom, use the <code>using()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token doc-comment comment">/** option: value */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> objB<span class="token punctuation">,</span> objC<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Note</p><p>When invoking <code>merge()</code> without any arguments, an underlying objects <code>Merger</code> instance is returned.</p></div><h3 id="depth" tabindex="-1"><a class="header-anchor" href="#depth"><span><code>depth</code></span></a></h3><p>The <code>depth</code> option specifies the maximum merge depth.</p><ul><li>Default maximum depth: <code>512</code></li></ul><p>A <code>MergeError</code> is thrown, if the maximum depth is exceeded.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Una&#39;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token comment">// Level 0</span></span>\n<span class="line">        <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>      <span class="token comment">// Level 1</span></span>\n<span class="line">        <span class="token string-property property">&#39;address&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token string-property property">&#39;street&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Somewhere Str. 654&#39;</span> <span class="token comment">// Level 2</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token number">1</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MergeError - Maximum merge depth (1) has been exceeded</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="skip" tabindex="-1"><a class="header-anchor" href="#skip"><span><code>skip</code></span></a></h3><p><code>skip</code> defines property keys that must not be merged.</p><p>It accepts an array of property keys or a callback.</p><h4 id="list-of-property-keys" tabindex="-1"><a class="header-anchor" href="#list-of-property-keys"><span>List of property keys</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Ulrik&#39;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token string-property property">&#39;address&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token string-property property">&#39;street&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Nowhere Str. 12&#39;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">skip</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;age&#39;</span> <span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above example results in the following new object:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;person&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ulrik&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token property">&quot;street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Nowhere Str. 12&quot;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Note</p><p>When specifying a list of property keys, then the depth level in which the property key is found does not matter.</p></div><h4 id="skip-callback" tabindex="-1"><a class="header-anchor" href="#skip-callback"><span>Skip Callback</span></a></h4><p>You can use a callback, if you need to handle more advanced skip logic. The callback accepts the the following arguments:</p><ul><li><code>key: PropertyKey</code> - The current property that is being processed.</li><li><code>source: object</code> - The source object that contains the key.</li><li><code>result: object</code> - The resulting object (<em>relative to the current depth that is being processed</em>).</li></ul><p>The callback MUST return a boolean value; <code>true</code> if given key must be skipped, <code>false</code> otherwise.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Jane&#39;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;James&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token string-property property">&#39;address&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token string-property property">&#39;street&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Sunview Palace 88&#39;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;White&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function-variable function">skip</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> source<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> key <span class="token operator">===</span> <span class="token string">&#39;name&#39;</span></span>\n<span class="line">                <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span></span>\n<span class="line">                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above example results in the following new object:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;person&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token property">&quot;street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Sunview Palace 88&quot;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="overwritewithundefined" tabindex="-1"><a class="header-anchor" href="#overwritewithundefined"><span><code>overwriteWithUndefined</code></span></a></h3><p>Determines if a property value should be overwritten with <code>undefined</code>.</p><p><strong>Note</strong>: <em>By default, all values are overwritten, even when they are <code>undefined</code>!</em></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;foo&#39;: undefined }</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">overwriteWithUndefined</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// { &#39;foo&#39;: true }</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usecloneable" tabindex="-1"><a class="header-anchor" href="#usecloneable"><span><code>useCloneable</code></span></a></h3>',29)),(0,e.Lk)("p",null,[s[17]||(s[17]=(0,e.eW)("Determines if an object's return value from a ")),s[18]||(s[18]=(0,e.Lk)("code",null,"clone()",-1)),s[19]||(s[19]=(0,e.eW)(" method (")),(0,e.Lk)("em",null,[s[16]||(s[16]=(0,e.eW)("see ")),(0,e.bF)(r,{to:"/archive/current/packages/support/objects/isCloneable.html"},{default:(0,e.k6)((()=>s[15]||(s[15]=[(0,e.Lk)("code",null,"Cloneable",-1)]))),_:1})]),s[20]||(s[20]=(0,e.eW)(") should be used for merging, rather than the source object itself."))]),s[37]||(s[37]=(0,e.Fv)('<p><strong>Note</strong>: <em>By default, if an object is cloneable, then its return value from <code>clone()</code> is used.</em></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">     <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">     <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">         <span class="token keyword">return</span> <span class="token punctuation">{</span></span>\n<span class="line">             <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Rick Doe&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">             <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">26</span></span>\n<span class="line">         <span class="token punctuation">}</span></span>\n<span class="line">     <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;foo&#39;: { &#39;name&#39;: &#39;Rick Doe&#39;, &#39;age&#39;: 26 } }</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">useCloneable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;foo&#39;: { &#39;name&#39;: &#39;Jane Doe&#39;, clone() {...} } }</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mergearrays" tabindex="-1"><a class="header-anchor" href="#mergearrays"><span><code>mergeArrays</code></span></a></h3>',3)),(0,e.Lk)("p",null,[s[23]||(s[23]=(0,e.eW)("When enabled, arrays, ")),(0,e.bF)(r,{to:"/archive/current/packages/support/arrays/isArrayLike.html"},{default:(0,e.k6)((()=>s[21]||(s[21]=[(0,e.eW)("array-like")]))),_:1}),s[24]||(s[24]=(0,e.eW)(", and ")),(0,e.bF)(r,{to:"/archive/current/packages/support/arrays/isConcatSpreadable.html"},{default:(0,e.k6)((()=>s[22]||(s[22]=[(0,e.eW)("concat spreadable")]))),_:1}),s[25]||(s[25]=(0,e.eW)(" objects are merged."))]),s[38]||(s[38]=(0,e.Fv)('<p><strong>Note</strong>: <em>By default, existing array values are NOT merged.</em></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;foo&#39;: [ 4, 5, 6 ] }</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mergeArrays</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;foo&#39;: [ 1, 2, 3, 4, 5, 6 ] }</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2)),(0,e.Lk)("p",null,[s[27]||(s[27]=(0,e.eW)("Behind the scene, the ")),(0,e.bF)(r,{to:"/archive/current/packages/support/arrays/merge.html"},{default:(0,e.k6)((()=>s[26]||(s[26]=[(0,e.eW)("array merge")]))),_:1}),s[28]||(s[28]=(0,e.eW)(" utility is used for merging arrays."))]),(0,e.Lk)("h3",l,[(0,e.Lk)("a",c,[(0,e.Lk)("span",null,[s[29]||(s[29]=(0,e.Lk)("code",null,"arrayMergeOptions",-1)),s[30]||(s[30]=(0,e.eW)()),(0,e.bF)(a,{type:"tip",text:"Available since v0.11",vertical:"middle"})])])]),(0,e.Lk)("p",null,[(0,e.Lk)("em",null,[s[32]||(s[32]=(0,e.eW)("See ")),(0,e.bF)(r,{to:"/archive/current/packages/support/arrays/merge.html#merge-options"},{default:(0,e.k6)((()=>s[31]||(s[31]=[(0,e.eW)("Array Merge Options")]))),_:1}),s[33]||(s[33]=(0,e.eW)("."))])]),s[39]||(s[39]=(0,e.Fv)('<h3 id="callback" tabindex="-1"><a class="header-anchor" href="#callback"><span><code>callback</code></span></a></h3><p>In situations when you need more advanced merge logic, you may specify a custom callback.</p><p>The callback is <em><strong>responsible</strong></em> for returning the value to be merged, from a given source object.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">1</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&#39;b&#39;</span><span class="token operator">:</span> <span class="token number">2</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> next<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> target<span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;a&#39;: 1, &#39;b&#39;: 3 }</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you do not have other merge options to specify, then you can simply provide a merge callback directly as argument for the <code>using()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> next<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> target<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments"><span>Arguments</span></a></h4><p>The merge callback is given the following arguments:</p><ul><li><code>target: MergeSourceInfo</code> - The source target information (<em>see below</em>).</li><li><code>next: NextCallback</code> - Callback to invoke for merging nested objects (<em>next depth level</em>).</li><li><code>options: Readonly&lt;MergeOptions&gt;</code> - The merge options to be applied.</li></ul><p><strong><code>target: MergeSourceInfo</code></strong></p><p>The source target information object contains the following properties:</p><ul><li><code>result: object</code> - The resulting object (<em>relative to object depth</em>)</li><li><code>key: PropertyKey</code> - The target property key in source object to.</li><li><code>value: any</code> - Value of the property in source object.</li><li><code>source: object</code> - The source object that holds the property key and value.</li><li><code>sourceIndex: number</code> - Source object&#39;s index (<em>relative to object depth</em>).</li><li><code>depth: number</code> - The current recursion depth.</li></ul><p><strong><code>next: NextCallback</code></strong></p><p>The callback to perform the merging of nested objects. It accepts the following arguments:</p><ul><li><code>sources: object[]</code> - The nested objects to be merged.</li><li><code>options: Readonly&lt;MergeOptions&gt;</code> - The merge options to be applied.</li><li><code>nextDepth: number</code> - The next recursion depth number.</li></ul><h4 id="onward" tabindex="-1"><a class="header-anchor" href="#onward"><span>Onward</span></a></h4><p>For additional information about the merge callback, please review the source code of the <code>defaultMergeCallback()</code>, inside <code>@aedart/support/objects</code>.</p>',17))])}]]);const u=JSON.parse('{"path":"/archive/current/packages/support/objects/merge.html","title":"Merge","lang":"en-GB","frontmatter":{"title":"Merge","description":"Merge multiple objects into a new object.","sidebarDepth":0},"headers":[{"level":2,"title":"Shallow Copied Types","slug":"shallow-copied-types","link":"#shallow-copied-types","children":[]},{"level":2,"title":"Unsafe Keys","slug":"unsafe-keys","link":"#unsafe-keys","children":[]},{"level":2,"title":"Merge Options","slug":"merge-options","link":"#merge-options","children":[{"level":3,"title":"depth","slug":"depth","link":"#depth","children":[]},{"level":3,"title":"skip","slug":"skip","link":"#skip","children":[]},{"level":3,"title":"overwriteWithUndefined","slug":"overwritewithundefined","link":"#overwritewithundefined","children":[]},{"level":3,"title":"useCloneable","slug":"usecloneable","link":"#usecloneable","children":[]},{"level":3,"title":"mergeArrays","slug":"mergearrays","link":"#mergearrays","children":[]},{"level":3,"title":"arrayMergeOptions","slug":"arraymergeoptions","link":"#arraymergeoptions","children":[]},{"level":3,"title":"callback","slug":"callback","link":"#callback","children":[]}]}],"git":{"updatedTime":1712045233000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":5}]},"filePathRelative":"archive/current/packages/support/objects/merge.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);