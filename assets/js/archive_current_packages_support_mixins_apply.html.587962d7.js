"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[4350],{7778:function(n,s,a){a.r(s),a.d(s,{comp:function(){return p},data:function(){return t}});var e=a(641);const i={};var p=(0,a(6262).A)(i,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="applying-mixins" tabindex="-1"><a class="header-anchor" href="#applying-mixins"><span>Applying Mixins</span></a></h1><p>To apply one or more mixins, use the <code>mix()</code> function and call <code>width()</code> with the mixins you wish to apply to a superclass.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> mix <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/mixins&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>\n<span class="line">    RectangleMixin<span class="token punctuation">,</span></span>\n<span class="line">    DescMixin</span>\n<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@acme/mixins&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token keyword">extends</span> <span class="token class-name">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span></span>\n<span class="line">    RectangleMixin<span class="token punctuation">,</span></span>\n<span class="line">    DescMixin</span>\n<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...remaining not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="extending-superclass" tabindex="-1"><a class="header-anchor" href="#extending-superclass"><span>Extending Superclass</span></a></h2><p>To extend a superclass and apply mixins onto it, pass the superclass as argument for the <code>mix()</code> function.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token keyword">extends</span> <span class="token class-name">mix</span><span class="token punctuation">(</span>Shape<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span></span>\n<span class="line">    RectangleMixin<span class="token punctuation">,</span></span>\n<span class="line">    DescMixin</span>\n<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...remaining not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Note</p><p>By default, if you do not provide <code>mix()</code> with a superclass, an empty class is automatically created. It is the equivalent of the following:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token keyword">extends</span> <span class="token class-name">mix</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span></span>\n<span class="line">    MyMixinA<span class="token punctuation">,</span></span>\n<span class="line">    MyMixinB<span class="token punctuation">,</span></span>\n<span class="line">    MyMixinC<span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>',7)]))}]]);const t=JSON.parse('{"path":"/archive/current/packages/support/mixins/apply.html","title":"Apply Mixins","lang":"en-GB","frontmatter":{"title":"Apply Mixins","description":"How to apply mixins.","sidebarDepth":0},"headers":[{"level":2,"title":"Extending Superclass","slug":"extending-superclass","link":"#extending-superclass","children":[]}],"git":{"updatedTime":1709288721000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/mixins/apply.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);