"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[2655],{3803:function(s,n,a){a.r(n),a.d(n,{comp:function(){return o},data:function(){return i}});var e=a(641);const t={id:"classlookslike",tabindex:"-1"},p={class:"header-anchor",href:"#classlookslike"},l={class:"table-of-contents"},c={};var o=(0,a(6262).A)(c,[["render",function(s,n){const a=(0,e.g2)("Badge"),c=(0,e.g2)("router-link");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",p,[(0,e.Lk)("span",null,[n[0]||(n[0]=(0,e.Lk)("code",null,"classLooksLike",-1)),n[1]||(n[1]=(0,e.eW)()),(0,e.bF)(a,{type:"tip",text:"Available since v0.9",vertical:"middle"})])])]),n[5]||(n[5]=(0,e.Lk)("p",null,[(0,e.eW)("Determines if a target class "),(0,e.Lk)("em",null,'"looks like"'),(0,e.eW)(' the provided class "blueprint".')],-1)),(0,e.Lk)("nav",l,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(c,{to:"#arguments"},{default:(0,e.k6)((()=>n[2]||(n[2]=[(0,e.eW)("Arguments")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(c,{to:"#class-blueprint"},{default:(0,e.k6)((()=>n[3]||(n[3]=[(0,e.eW)("Class Blueprint")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(c,{to:"#recursive"},{default:(0,e.k6)((()=>n[4]||(n[4]=[(0,e.eW)("Recursive")]))),_:1})])])]),n[6]||(n[6]=(0,e.Fv)('<h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments"><span>Arguments</span></a></h2><p><code>classLooksLike()</code> accepts the following arguments:</p><ul><li><code>target: object</code> - the target class object.</li><li><code>blueprint: ClassBlueprint</code> - a blueprint that defines the expected members of a class (<em>see <a href="#class-blueprint">Class Blueprint</a> for details.</em>).</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> classLooksLike <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aedart/support/reflections&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> blueprint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">members</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">classLooksLike</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> blueprint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">classLooksLike</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">,</span> blueprint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class-blueprint" tabindex="-1"><a class="header-anchor" href="#class-blueprint"><span>Class Blueprint</span></a></h2><p>The class &quot;blueprint&quot; is an object that defines the expected members (<em>property keys</em>) of a target class. All defined members must exist in target class&#39; prototype, before the <code>classLooksLike()</code> returns <code>true</code>.</p><p>You can specify either or both of the following properties in a class blueprint object:</p><ul><li><code>members: PropertyKey[]</code> - (<em>optional</em>) Properties or methods expected to exist in class&#39; prototype.</li><li><code>staticMembers: PropertyKey[]</code> - (<em>optional</em>) Properties or methods expected to exist in class as static members.</li></ul><p><strong>Note:</strong> <em>If you do not specify either <code>members</code> or <code>staticMembers</code>, then a <code>TypeError</code> is thrown.</em></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">static</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> blueprint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">members</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">staticMembers</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">classLooksLike</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> blueprint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">classLooksLike</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">,</span> blueprint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recursive" tabindex="-1"><a class="header-anchor" href="#recursive"><span>Recursive</span></a></h2><p><code>classLooksLike()</code> traverses target class&#39; prototype chain. This means that you can compare a subclass against a blueprint and inherited members will automatically be included in the check.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> blueprint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">members</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">classLooksLike</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> blueprint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">classLooksLike</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">,</span> blueprint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',13))])}]]);const i=JSON.parse('{"path":"/archive/current/packages/support/reflections/classLooksLike.html","title":"Class Looks Like","lang":"en-GB","frontmatter":{"title":"Class Looks Like","description":"Determine if a class looks like blueprint.","sidebarDepth":0},"headers":[{"level":2,"title":"Arguments","slug":"arguments","link":"#arguments","children":[]},{"level":2,"title":"Class Blueprint","slug":"class-blueprint","link":"#class-blueprint","children":[]},{"level":2,"title":"Recursive","slug":"recursive","link":"#recursive","children":[]}],"git":{"updatedTime":1709548506000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/reflections/classLooksLike.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);