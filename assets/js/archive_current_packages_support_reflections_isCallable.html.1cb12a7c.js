"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[5560],{5205:function(n,s,a){a.r(s),a.d(s,{comp:function(){return o},data:function(){return c}});var t=a(641);const e={id:"iscallable",tabindex:"-1"},l={class:"header-anchor",href:"#iscallable"},p={};var o=(0,a(6262).A)(p,[["render",function(n,s){const a=(0,t.g2)("Badge"),p=(0,t.g2)("RouteLink");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Lk)("h1",e,[(0,t.Lk)("a",l,[(0,t.Lk)("span",null,[s[0]||(s[0]=(0,t.Lk)("code",null,"isCallable",-1)),s[1]||(s[1]=(0,t.eW)()),(0,t.bF)(a,{type:"tip",text:"Available since v0.7",vertical:"middle"})])])]),(0,t.Lk)("p",null,[s[3]||(s[3]=(0,t.eW)('Determine if a value is "callable" - a function that is not a ')),(0,t.bF)(p,{to:"/archive/current/packages/support/reflections/isClassConstructor.html"},{default:(0,t.k6)((()=>s[2]||(s[2]=[(0,t.eW)("class constructor")]))),_:1}),s[4]||(s[4]=(0,t.eW)("."))]),s[8]||(s[8]=(0,t.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> isCallable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/reflections&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">isCallable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isCallable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isCallable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token function">isCallable</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">isCallable</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isCallable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">isCallable</span><span class="token punctuation">(</span>Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Acknowledgement</strong></p><p>The source code of the above shown methods is heavily inspired by Denis Pushkarev&#39;s Core-js implementation of the <a href="https://github.com/zloirock/core-js#function-iscallable-isconstructor-" target="_blank" rel="noopener noreferrer">Function.isCallable / Function.isConstructor</a> proposal (<em>License MIT</em>).</p>',3)),(0,t.Lk)("p",null,[s[6]||(s[6]=(0,t.eW)("See also ")),(0,t.bF)(p,{to:"/archive/current/packages/support/reflections/isClassConstructor.html"},{default:(0,t.k6)((()=>s[5]||(s[5]=[(0,t.Lk)("code",null,"isClassConstructor()",-1)]))),_:1}),s[7]||(s[7]=(0,t.eW)("."))])])}]]);const c=JSON.parse('{"path":"/archive/current/packages/support/reflections/isCallable.html","title":"Is Callable","lang":"en-GB","frontmatter":{"title":"Is Callable","description":"Determine if value is callable.","sidebarDepth":0},"headers":[],"git":{"updatedTime":1710167835000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/reflections/isCallable.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);