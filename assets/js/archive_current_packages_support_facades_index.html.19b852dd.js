"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[547],{8220:function(n,s,a){a.r(s),a.d(s,{comp:function(){return o},data:function(){return l}});var e=a(641);const t={id:"introduction",tabindex:"-1"},p={class:"header-anchor",href:"#introduction"},c={class:"table-of-contents"},i={};var o=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,e.g2)("Badge"),i=(0,e.g2)("RouteLink"),o=(0,e.g2)("router-link");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",p,[(0,e.Lk)("span",null,[s[0]||(s[0]=(0,e.eW)("Introduction ")),(0,e.bF)(a,{type:"tip",text:"Available since v0.11",vertical:"middle"}),(0,e.bF)(a,{type:"success",text:"Browser",vertical:"middle"})])])]),(0,e.Lk)("p",null,[s[2]||(s[2]=(0,e.eW)("The ")),s[3]||(s[3]=(0,e.Lk)("code",null,"@aedart/support/facades",-1)),s[4]||(s[4]=(0,e.eW)(" package is an adaptation of ")),s[5]||(s[5]=(0,e.Lk)("a",{href:"https://laravel.com/docs/11.x/facades",target:"_blank",rel:"noopener noreferrer"},"Laravel's Facades",-1)),s[6]||(s[6]=(0,e.eW)(" (")),s[7]||(s[7]=(0,e.Lk)("em",null,[(0,e.eW)("originally licensed under "),(0,e.Lk)("a",{href:"https://github.com/laravel/framework/blob/11.x/src/Illuminate/Container/LICENSE.md",target:"_blank",rel:"noopener noreferrer"},"MIT")],-1)),s[8]||(s[8]=(0,e.eW)("). In this context, a ")),s[9]||(s[9]=(0,e.Lk)("a",{href:"https://en.wikipedia.org/wiki/Facade_pattern",target:"_blank",rel:"noopener noreferrer"},"Facade",-1)),s[10]||(s[10]=(0,e.eW)(" acts as an interface (")),s[11]||(s[11]=(0,e.Lk)("em",null,"or gateway",-1)),s[12]||(s[12]=(0,e.eW)(") to an underlying object instance, resolved from the ")),(0,e.bF)(i,{to:"/archive/current/packages/container/"},{default:(0,e.k6)((()=>s[1]||(s[1]=[(0,e.eW)("Service Container")]))),_:1}),s[13]||(s[13]=(0,e.eW)("."))]),s[24]||(s[24]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/facades&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> service <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;api_service&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1)),(0,e.Lk)("nav",c,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(o,{to:"#setup-facade-s-service-container-instance"},{default:(0,e.k6)((()=>s[14]||(s[14]=[(0,e.eW)("Setup Facade's Service Container instance")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(o,{to:"#define-a-facade"},{default:(0,e.k6)((()=>s[15]||(s[15]=[(0,e.eW)("Define a Facade")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(o,{to:"#the-obtain-method"},{default:(0,e.k6)((()=>s[16]||(s[16]=[(0,e.eW)("The obtain() method")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(o,{to:"#testing"},{default:(0,e.k6)((()=>s[17]||(s[17]=[(0,e.eW)("Testing")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(o,{to:"#onward"},{default:(0,e.k6)((()=>s[18]||(s[18]=[(0,e.eW)("Onward")]))),_:1})])])]),s[25]||(s[25]=(0,e.Fv)('<h2 id="setup-facade-s-service-container-instance" tabindex="-1"><a class="header-anchor" href="#setup-facade-s-service-container-instance"><span>Setup Facade&#39;s Service Container instance</span></a></h2><p>Before you can make use of facades, you must ensure that the <code>Facade</code> abstraction has a service container instance set. This can be done via the static <code>setContainer()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/container&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Facade <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/facades&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Somewhere in your application&#39;s setup or boot logic...</span></span>\n<span class="line">Facade<span class="token punctuation">.</span><span class="token function">setContainer</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Consequently, if you need to unset the Service Container instance and make sure that the <code>Facade</code> abstraction is cleared of any previously resolved object instances, invoke the static <code>destroy()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Facade<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="define-a-facade" tabindex="-1"><a class="header-anchor" href="#define-a-facade"><span>Define a Facade</span></a></h2>',6)),(0,e.Lk)("p",null,[s[20]||(s[20]=(0,e.eW)("To define your own Facade, extend the abstract ")),s[21]||(s[21]=(0,e.Lk)("code",null,"Facade",-1)),s[22]||(s[22]=(0,e.eW)(" class, and specify the target ")),(0,e.bF)(i,{to:"/archive/current/packages/container/bindings.html#identifiers"},{default:(0,e.k6)((()=>s[19]||(s[19]=[(0,e.eW)("binding identifier")]))),_:1}),s[23]||(s[23]=(0,e.eW)("."))]),s[26]||(s[26]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Facade <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/facades&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ApiFacade</span> <span class="token keyword">extends</span> <span class="token class-name">Facade</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">static</span> <span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;api_client&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are using TypeScript, then you can also specify the return type of the <code>obtain()</code> method, by declaring the underlying resolved object&#39;s type, for the internal <code>type</code> property (<em><code>type</code> property is not used for any other purpose</em>).</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Identifier <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/contracts/container&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Facade <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/facades&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> AcmeApiClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@acme/contracts/api&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ApiFacade</span> <span class="token keyword">extends</span> <span class="token class-name">Facade</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">static</span> type<span class="token operator">:</span> AcmeApiClient<span class="token punctuation">;</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Identifier</span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;api_client&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-obtain-method" tabindex="-1"><a class="header-anchor" href="#the-obtain-method"><span>The <code>obtain()</code> method</span></a></h2><p>The <code>obtain()</code> is used to obtain the Facade&#39;s underlying object instance. Typically, you do not need to do anything more than to implement the <code>getIdentifier()</code> method in your concrete facade class. But, in some situations you might need to resolve a binding differently. Or, perhaps perform some kind of additional post-resolve logic, in order to make easier / simpler to work with the resolved object.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">LimitedApiFacade</span> <span class="token keyword">extends</span> <span class="token class-name">Facade</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">static</span> <span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;api_client&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token doc-comment comment">/**</span>\n<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@acme/contracts/api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AcmeApiClient<span class="token punctuation">}</span></span></span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token keyword">static</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        client<span class="token punctuation">.</span>error_response_thresshold <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>\n<span class="line">        client<span class="token punctuation">.</span>ttl <span class="token operator">=</span> <span class="token number">350</span><span class="token punctuation">;</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token keyword">return</span> client<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> LimitedApiFacade<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://acme.com/api/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing"><span>Testing</span></a></h2><p>When you need to test components that rely on Facades, you can register a &quot;spy&quot; (<em>mocked object</em>), via the static method <code>spy()</code>. Consider, for instance, that you have a users repository component that relies on a custom Api facade.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ApiFacade <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@acme/facades&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">UsersRepository</span> <span class="token punctuation">{</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> ApiFacade<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://acme.com/api/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token comment">// ...remaining not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your testing environment, you can specify a callback that can be used to create a fake object (<em>mocked object</em>) that must behave in a certain way, via the <code>spy()</code> method. The callback must return either of the following:</p><ul><li>The Facade&#39;s underlying resolved object.</li><li>Or, a fake object that behaves as desired (<em>in the context of your test</em>).</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">ApiFacade<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">container<span class="token punctuation">,</span> identifier</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...mocking not shown ...</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">return</span> myResolvedObject<span class="token punctuation">;</span> <span class="token comment">// resolved or mocked object</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All subsequent calls to the facade&#39;s underlying object will be made to the registered &quot;spy&quot; object instead.</p><p>The following example uses <a href="https://jasmine.github.io/" target="_blank" rel="noopener noreferrer">Jasmine</a> as testing framework. However, the <code>spy()</code> method is not tied to any specific testing or object mocking framework. Feel free to use whatever testing tools or frameworks fits your purpose best.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ApiFacade <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@acme/facades&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UsersRepository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@app&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// E.g. testing via Jasmine Framework...</span></span>\n<span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;@acme/api&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment">// Test setup not shown in this example...</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        Facade<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;can obtain users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">let</span> mocked <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">        ApiFacade<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">container<span class="token punctuation">,</span> identifier</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> apiClient <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>identifier<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            mocked <span class="token operator">=</span> <span class="token function">spyOn</span><span class="token punctuation">(</span>apiClient<span class="token punctuation">,</span> <span class="token string">&#39;fetch&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">                <span class="token punctuation">.</span>and</span>\n<span class="line">                <span class="token punctuation">.</span><span class="token function">returnValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>\n<span class="line">                    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jackie&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">                    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lana&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">                    <span class="token comment">// ...etc</span></span>\n<span class="line">                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token comment">// return the resolved api client...</span></span>\n<span class="line">            <span class="token keyword">return</span> apiClient<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">const</span> repo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsersRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> users <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token function">expect</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">.</span>not</span>\n<span class="line">            <span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token function">expect</span><span class="token punctuation">(</span>mocked<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward"><span>Onward</span></a></h2><p>Please consider reading Laravel&#39;s <a href="https://laravel.com/docs/11.x/facades#when-to-use-facades" target="_blank" rel="noopener noreferrer">&quot;When to Utilize Facades&quot;</a>, to gain an idea of when using Facades can be good, and when not.</p>',18))])}]]);const l=JSON.parse('{"path":"/archive/current/packages/support/facades/","title":"About Facades","lang":"en-GB","frontmatter":{"title":"About Facades","description":"A static interface to classes","sidebarDepth":0},"headers":[{"level":2,"title":"Setup Facade\'s Service Container instance","slug":"setup-facade-s-service-container-instance","link":"#setup-facade-s-service-container-instance","children":[]},{"level":2,"title":"Define a Facade","slug":"define-a-facade","link":"#define-a-facade","children":[]},{"level":2,"title":"The obtain() method","slug":"the-obtain-method","link":"#the-obtain-method","children":[]},{"level":2,"title":"Testing","slug":"testing","link":"#testing","children":[]},{"level":2,"title":"Onward","slug":"onward","link":"#onward","children":[]}],"git":{"updatedTime":1712656186000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":2}]},"filePathRelative":"archive/current/packages/support/facades/README.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);