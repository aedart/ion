"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[4023],{659:function(n,s,a){a.r(s),a.d(s,{comp:function(){return c},data:function(){return l}});var e=a(641);const p={class:"table-of-contents"},t={};var c=(0,a(6262).A)(t,[["render",function(n,s){const a=(0,e.g2)("router-link"),t=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[s[10]||(s[10]=(0,e.Lk)("h1",{id:"edge-cases",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#edge-cases"},[(0,e.Lk)("span",null,"Edge Cases")])],-1)),(0,e.Lk)("nav",p,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#getter-setter-declared-in-different-concerns"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.eW)("Getter & Setter declared in different concerns")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#inheritance-vs-concern-members"},{default:(0,e.k6)((()=>s[1]||(s[1]=[(0,e.eW)("Inheritance vs. Concern members")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#concerns-using-other-concerns"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.eW)("Concerns using other concerns")]))),_:1})])])]),s[11]||(s[11]=(0,e.Fv)('<h2 id="getter-setter-declared-in-different-concerns" tabindex="-1"><a class="header-anchor" href="#getter-setter-declared-in-different-concerns"><span>Getter &amp; Setter declared in different concerns</span></a></h2><p>It is not possible to define a property&#39;s getter and setter methods in separate concerns, and thereafter use them in a target class. Despite serving different purposes, the getter and setter share the same property name and are therefore treated as being one and the same property key. The following example will therefore always lead to an <code>AliasConflictError</code> being thrown.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractConcern<span class="token punctuation">,</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">get</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">set</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ...not shown.. */</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span></span>\n<span class="line">    <span class="token constant">A</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token constant">B</span> <span class="token comment">// AliasConflictError - &quot;title&quot; property from A!</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3)),(0,e.Lk)("p",null,[s[4]||(s[4]=(0,e.eW)("You can resolve the above shown issue via a ")),(0,e.bF)(t,{to:"/archive/current/packages/support/concerns/conflictResolution.html#resolve-naming-conflicts"},{default:(0,e.k6)((()=>s[3]||(s[3]=[(0,e.eW)("custom alias")]))),_:1}),s[5]||(s[5]=(0,e.eW)(". But, it is advisable to design your concerns such that the offer appropriate getter and setter methods for a property, in one and the same concern - ")),s[6]||(s[6]=(0,e.Lk)("em",null,"if you intend for such a property to be readable and writable.",-1))]),s[12]||(s[12]=(0,e.Fv)('<h2 id="inheritance-vs-concern-members" tabindex="-1"><a class="header-anchor" href="#inheritance-vs-concern-members"><span>Inheritance vs. Concern members</span></a></h2><p>The concerns mechanism will never overwrite existing methods or properties inside a target class - not even when those methods or properties are inherited from a parent class.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractConcern<span class="token punctuation">,</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Connection</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;special&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">user</span><span class="token punctuation">(</span>Connection<span class="token punctuation">)</span> <span class="token comment">// driver() is NOT aliased - method inherited from Api class!</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">SailBoat</span> <span class="token keyword">extends</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SailBoat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">instance<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3)),(0,e.Lk)("p",null,[s[8]||(s[8]=(0,e.eW)("The only way to resolve the above shown issue, is by making use of a ")),(0,e.bF)(t,{to:"/archive/current/packages/support/concerns/conflictResolution.html#resolve-naming-conflicts"},{default:(0,e.k6)((()=>s[7]||(s[7]=[(0,e.eW)("custom alias")]))),_:1}),s[9]||(s[9]=(0,e.eW)(" and manually overwrite the inherited method. E.g."))]),s[13]||(s[13]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractConcern<span class="token punctuation">,</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Connection</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;special&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">user</span><span class="token punctuation">(</span></span>\n<span class="line">    <span class="token punctuation">[</span>Connection<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token string-property property">&#39;driver&#39;</span><span class="token operator">:</span> <span class="token string">&#39;specialDriver&#39;</span> <span class="token comment">// alias &quot;driver&quot; as &quot;specialDriver&quot;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">SailBoat</span> <span class="token keyword">extends</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token comment">// Overwrite inherited method</span></span>\n<span class="line">    <span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Invoke the &quot;specialDriver&quot;... </span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">specialDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SailBoat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">instance<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// special</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="concerns-using-other-concerns" tabindex="-1"><a class="header-anchor" href="#concerns-using-other-concerns"><span>Concerns using other concerns</span></a></h2><p>A concern can use other concerns classes. However, depending on your complexity, doing so may impact performance. Consider the following example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractConcern<span class="token punctuation">,</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Ping</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Ping<span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Pong</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">pong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;pong&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Pong<span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">instance<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ping</span></span>\n<span class="line">instance<span class="token punctuation">.</span><span class="token function">pong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pong</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above shown example, whenever the <code>ping()</code> method is invoked, the call stack will be similar to the following:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Game (instance).ping() -&gt; Pong (instance).ping() -&gt; Ping (instance).ping()</span>\n<span class="line"></span>\n<span class="line">(&quot;-&gt;&quot; represents concerns container instance)</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In some isolated cases, this might be acceptable for you. Nevertheless, if your application makes heavy use of concerns using other concerns, then your application&#39;s overall performance could suffer. You should consider merging multiple concern classes into a single class, if it is reasonable and possible. Alternatively, you can also consider extending existing concern classes. For instance:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractConcern<span class="token punctuation">,</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/concerns&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Ping</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConcern</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Extend Ping concern...</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Pong</span> <span class="token keyword">extends</span> <span class="token class-name">Ping</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">pong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;pong&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">use</span><span class="token punctuation">(</span>Pong<span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">instance<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ping</span></span>\n<span class="line">instance<span class="token punctuation">.</span><span class="token function">pong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pong</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, whenever the <code>ping()</code> method is invoked, the call stack is slightly reduced:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Game (instance).ping() -&gt; Pong (instance).ping()</span>\n<span class="line"></span>\n<span class="line">(&quot;-&gt;&quot; represents concerns container instance)</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',10))])}]]);const l=JSON.parse('{"path":"/archive/current/packages/support/concerns/edgeCases.html","title":"Edge Cases","lang":"en-GB","frontmatter":{"title":"Edge Cases","description":"A few edge cases when making or using concerns","sidebarDepth":0},"headers":[{"level":2,"title":"Getter & Setter declared in different concerns","slug":"getter-setter-declared-in-different-concerns","link":"#getter-setter-declared-in-different-concerns","children":[]},{"level":2,"title":"Inheritance vs. Concern members","slug":"inheritance-vs-concern-members","link":"#inheritance-vs-concern-members","children":[]},{"level":2,"title":"Concerns using other concerns","slug":"concerns-using-other-concerns","link":"#concerns-using-other-concerns","children":[]}],"git":{"updatedTime":1709641376000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/concerns/edgeCases.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);