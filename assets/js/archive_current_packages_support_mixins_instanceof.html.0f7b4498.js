"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[1462],{5924:function(n,s,a){a.r(s),a.d(s,{comp:function(){return t},data:function(){return c}});var e=a(641);const p={};var t=(0,a(6262).A)(p,[["render",function(n,s){const a=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[s[5]||(s[5]=(0,e.Lk)("h1",{id:"instanceof-operator",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#instanceof-operator"},[(0,e.Lk)("span",null,[(0,e.Lk)("code",null,"instanceof"),(0,e.eW)(" Operator")])])],-1)),(0,e.Lk)("p",null,[s[1]||(s[1]=(0,e.eW)("When you defined your mixins using the ")),(0,e.bF)(a,{to:"/archive/current/packages/support/mixins/newMixin.html"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.Lk)("code",null,"Mixin()",-1),(0,e.eW)(" decorator function")]))),_:1}),s[2]||(s[2]=(0,e.eW)(", then it will support ")),s[3]||(s[3]=(0,e.Lk)("code",null,"instanceof",-1)),s[4]||(s[4]=(0,e.eW)(" checks. Consider the following example:"))]),s[6]||(s[6]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// A regular mixin without &quot;Mixin&quot; decorator </span></span>\n<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MixinA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> superclas <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Mixin with &quot;Mixin&quot; decorator</span></span>\n<span class="line"><span class="token keyword">const</span> MixinB <span class="token operator">=</span> <span class="token function">Mixin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> superclass <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// -------------------------------------------------------------------- //</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">mix</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span></span>\n<span class="line">    MixinA<span class="token punctuation">,</span></span>\n<span class="line">    MixinB</span>\n<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// -------------------------------------------------------------------- //</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">MixinA</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">MixinB</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1))])}]]);const c=JSON.parse('{"path":"/archive/current/packages/support/mixins/instanceof.html","title":"Instanceof","lang":"en-GB","frontmatter":{"title":"Instanceof","description":"Using instanceof operator.","sidebarDepth":0},"headers":[],"git":{"updatedTime":1709288721000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/mixins/instanceof.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);