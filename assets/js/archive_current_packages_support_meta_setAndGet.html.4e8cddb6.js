"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[5350],{9663:function(a,n,s){s.r(n),s.d(n,{comp:function(){return l},data:function(){return c}});var e=s(641);const t={class:"table-of-contents"},p={};var l=(0,s(6262).A)(p,[["render",function(a,n){const s=(0,e.g2)("router-link"),p=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[n[11]||(n[11]=(0,e.Lk)("h1",{id:"set-and-get-metadata",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#set-and-get-metadata"},[(0,e.Lk)("span",null,"Set and Get Metadata")])],-1)),(0,e.Lk)("nav",t,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(s,{to:"#set-metadata"},{default:(0,e.k6)((()=>n[0]||(n[0]=[(0,e.eW)("Set Metadata")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(s,{to:"#get-metadata"},{default:(0,e.k6)((()=>n[1]||(n[1]=[(0,e.eW)("Get Metadata")]))),_:1}),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(s,{to:"#default-value"},{default:(0,e.k6)((()=>n[2]||(n[2]=[(0,e.eW)("Default Value")]))),_:1})])])]),(0,e.Lk)("li",null,[(0,e.bF)(s,{to:"#callback"},{default:(0,e.k6)((()=>n[3]||(n[3]=[(0,e.eW)("Callback")]))),_:1})])])]),n[12]||(n[12]=(0,e.Lk)("h2",{id:"set-metadata",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#set-metadata"},[(0,e.Lk)("span",null,"Set Metadata")])],-1)),n[13]||(n[13]=(0,e.Lk)("p",null,[(0,e.eW)("To define metadata on a class or its elements, use "),(0,e.Lk)("code",null,"meta()"),(0,e.eW)(". It accepts the following arguments:")],-1)),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[n[8]||(n[8]=(0,e.Lk)("code",null,"key",-1)),n[9]||(n[9]=(0,e.eW)(": ")),(0,e.Lk)("em",null,[n[6]||(n[6]=(0,e.eW)("name of metadata identifier. Can also be a path (")),(0,e.Lk)("em",null,[n[5]||(n[5]=(0,e.eW)("see ")),(0,e.bF)(p,{to:"/archive/current/packages/support/objects/set.html"},{default:(0,e.k6)((()=>n[4]||(n[4]=[(0,e.Lk)("code",null,"set",-1)]))),_:1})]),n[7]||(n[7]=(0,e.eW)(")."))])]),n[10]||(n[10]=(0,e.Lk)("li",null,[(0,e.Lk)("code",null,"value"),(0,e.eW)(": "),(0,e.Lk)("em",null,[(0,e.eW)("arbitrary data. Can be a "),(0,e.Lk)("a",{href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"},"primitive value"),(0,e.eW)(", an "),(0,e.Lk)("a",{href:"https://developer.mozilla.org/en-US/docs/Glossary/Object",target:"_blank",rel:"noopener noreferrer"},"object"),(0,e.eW)(", or a "),(0,e.Lk)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},"function"),(0,e.eW)(".")])],-1))]),n[14]||(n[14]=(0,e.Fv)('<p>To obtain metadata, use the <code>getMeta()</code> method. You can also use <code>getAllMeta()</code>, if you wish to obtain all available metadata for a target class.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> meta <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aedart/support/meta&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">meta</span><span class="token punctuation">(</span><span class="token string">&#39;service_alias&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;locationSearcher&#39;</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Service</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    @<span class="token function">meta</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Name of service&#39;</span><span class="token punctuation">)</span> name<span class="token punctuation">;</span></span>\n<span class="line">    </span>\n<span class="line">    @<span class="token function">meta</span><span class="token punctuation">(</span><span class="token string">&#39;fetch.desc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Fetches resource via a gateway&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    @<span class="token function">meta</span><span class="token punctuation">(</span><span class="token string">&#39;fetch.dependencies&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;my-gateway&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">async</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">gateway</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...implementation not shown...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-metadata" tabindex="-1"><a class="header-anchor" href="#get-metadata"><span>Get Metadata</span></a></h2><p>Use <code>getMeta()</code> or <code>getAllMeta()</code> to retrieve metadata.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getMeta<span class="token punctuation">,</span> getAllMeta <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aedart/support/meta&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token function">getMeta</span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> <span class="token string">&#39;fetch.desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> dependencies <span class="token operator">=</span> <span class="token function">getMeta</span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> <span class="token string">&#39;fetch.dependencies&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Or, obtain all metadata</span></span>\n<span class="line"><span class="token keyword">const</span> allMeta <span class="token operator">=</span> <span class="token function">getAllMeta</span><span class="token punctuation">(</span>Service<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Metadata Availability</p><p>Depending on the kind of element that is decorated, metadata might only <strong><em>become available</em></strong> for reading, <strong><em>after</em></strong> a new class instance has been instantiated. This is true for the following elements:</p><ul><li><code>method</code></li><li><code>getter</code></li><li><code>setter</code></li><li><code>field</code></li><li><code>accessor</code></li></ul><p><strong>Static Elements</strong></p><p>If an element is declared as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static" target="_blank" rel="noopener noreferrer"><code>static</code></a>, then it&#39;s metadata becomes available as soon as the class has been defined.</p></div><h3 id="default-value" tabindex="-1"><a class="header-anchor" href="#default-value"><span>Default Value</span></a></h3><p>The <code>getMeta()</code> method also offers a <code>defaultValue</code> argument, which is returned, in case that a metadata value does not exist for a given identifier.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token function">getMeta</span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> <span class="token string">&#39;fetch.desc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;N/A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="callback" tabindex="-1"><a class="header-anchor" href="#callback"><span>Callback</span></a></h2><p>If you need to create more advanced metadata, you can specify a callback as the first argument for the <code>meta()</code> decorator method. When using a callback you gain access to the <code>target</code> that is being decorated, as well as the decorator <code>context</code>. The callback <strong>MUST</strong> return an object that contains a <code>key</code> and a <code>value</code> property.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> meta <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aedart/support/meta&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    @<span class="token function">meta</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token literal-property property">key</span><span class="token operator">:</span> context<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>\n<span class="line">            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token function">delegateTo</span><span class="token punctuation">(</span><span class="token parameter">gateway</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...not shown...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although the above example is a bit cumbersome to read, it shows a simple way to defined metadata for a method, which utilises the decorator <code>context</code>. If you wish, you can use this approach to create your own specialised meta decorators. Doing so can also improve the readability of your class. Consider the following example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> meta <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aedart/support/meta&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">function</span> <span class="token function">delegateMeta</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token function">meta</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token literal-property property">key</span><span class="token operator">:</span> context<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>\n<span class="line">            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    @<span class="token function">delegateMeta</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token function">delegateTo</span><span class="token punctuation">(</span><span class="token parameter">gateway</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...not shown...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',14))])}]]);const c=JSON.parse('{"path":"/archive/current/packages/support/meta/setAndGet.html","title":"Set & Get","lang":"en-GB","frontmatter":{"title":"Set & Get","description":"Defining and retrieving metadata.","sidebarDepth":0},"headers":[{"level":2,"title":"Set Metadata","slug":"set-metadata","link":"#set-metadata","children":[]},{"level":2,"title":"Get Metadata","slug":"get-metadata","link":"#get-metadata","children":[{"level":3,"title":"Default Value","slug":"default-value","link":"#default-value","children":[]}]},{"level":2,"title":"Callback","slug":"callback","link":"#callback","children":[]}],"git":{"updatedTime":1709288721000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":1}]},"filePathRelative":"archive/current/packages/support/meta/setAndGet.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);