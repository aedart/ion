"use strict";(self.webpackChunk_aedart_ion_monorepo=self.webpackChunk_aedart_ion_monorepo||[]).push([[5916],{7967:function(n,s,a){a.r(s),a.d(s,{comp:function(){return c},data:function(){return o}});var e=a(641);const t={class:"table-of-contents"},p={class:"hint-container warning"},l={};var c=(0,a(6262).A)(l,[["render",function(n,s){const a=(0,e.g2)("router-link"),l=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[s[46]||(s[46]=(0,e.Lk)("h1",{id:"resolving",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#resolving"},[(0,e.Lk)("span",null,"Resolving")])],-1)),(0,e.Lk)("nav",t,[(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#the-make-method"},{default:(0,e.k6)((()=>s[0]||(s[0]=[(0,e.eW)("The make() method")]))),_:1}),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#dependencies"},{default:(0,e.k6)((()=>s[1]||(s[1]=[(0,e.eW)("Dependencies")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#the-args-argument"},{default:(0,e.k6)((()=>s[2]||(s[2]=[(0,e.eW)("The args Argument")]))),_:1})])])]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#the-call-method"},{default:(0,e.k6)((()=>s[3]||(s[3]=[(0,e.eW)("The call() method")]))),_:1}),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#class-method-reference"},{default:(0,e.k6)((()=>s[4]||(s[4]=[(0,e.eW)("Class Method Reference")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#callback-wrapper"},{default:(0,e.k6)((()=>s[5]||(s[5]=[(0,e.eW)("Callback Wrapper")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#callback"},{default:(0,e.k6)((()=>s[6]||(s[6]=[(0,e.eW)("Callback")]))),_:1})])])]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#hooks"},{default:(0,e.k6)((()=>s[7]||(s[7]=[(0,e.eW)("Hooks")]))),_:1}),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#before"},{default:(0,e.k6)((()=>s[8]||(s[8]=[(0,e.eW)("before()")]))),_:1})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"#after"},{default:(0,e.k6)((()=>s[9]||(s[9]=[(0,e.eW)("after()")]))),_:1})])])])])]),s[47]||(s[47]=(0,e.Lk)("h2",{id:"the-make-method",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#the-make-method"},[(0,e.Lk)("span",null,[(0,e.eW)("The "),(0,e.Lk)("code",null,"make()"),(0,e.eW)(" method")])])],-1)),s[48]||(s[48]=(0,e.Lk)("p",null,[(0,e.eW)("To resolve component instances or values from the Service Container, use the "),(0,e.Lk)("code",null,"make()"),(0,e.eW)(" method. It accepts the following arguments:")],-1)),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[s[11]||(s[11]=(0,e.Lk)("code",null,"identifier: Identifier",-1)),s[12]||(s[12]=(0,e.eW)(" - Target ")),(0,e.bF)(l,{to:"/archive/current/packages/container/bindings.html#identifiers"},{default:(0,e.k6)((()=>s[10]||(s[10]=[(0,e.eW)("binding identifier")]))),_:1}),s[13]||(s[13]=(0,e.eW)("."))]),(0,e.Lk)("li",null,[s[16]||(s[16]=(0,e.Lk)("code",null,"args: any[] = []",-1)),s[17]||(s[17]=(0,e.eW)(" - (")),s[18]||(s[18]=(0,e.Lk)("em",null,"optional",-1)),s[19]||(s[19]=(0,e.eW)(") Eventual arguments to be passed on to ")),(0,e.bF)(l,{to:"/archive/current/packages/container/bindings.html#constructors"},{default:(0,e.k6)((()=>s[14]||(s[14]=[(0,e.eW)("class constructor")]))),_:1}),s[20]||(s[20]=(0,e.eW)(" or ")),(0,e.bF)(l,{to:"/archive/current/packages/container/bindings.html#factory-callbacks"},{default:(0,e.k6)((()=>s[15]||(s[15]=[(0,e.eW)('"factory" callback')]))),_:1}),s[21]||(s[21]=(0,e.eW)("."))])]),s[49]||(s[49]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> recorder <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;recorder&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When specifying a class constructor as the <code>identifier</code> argument, the <code>make()</code> method will automatically attempt to create a new instance of the given class, even if no binding was registered for it.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">AudioPlayer</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> audio <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>AudioPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new AudioPlayer instance</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span>Dependencies</span></a></h3>',4)),(0,e.Lk)("p",null,[s[23]||(s[23]=(0,e.eW)("If the target that must be resolved is a class that has ")),(0,e.bF)(l,{to:"/archive/current/packages/container/dependencies.html"},{default:(0,e.k6)((()=>s[22]||(s[22]=[(0,e.eW)("dependencies defined")]))),_:1}),s[24]||(s[24]=(0,e.eW)(" as ")),s[25]||(s[25]=(0,e.Lk)("a",{href:"../support/meta"},"metadata",-1)),s[26]||(s[26]=(0,e.eW)(", then the ")),s[27]||(s[27]=(0,e.Lk)("code",null,"make()",-1)),s[28]||(s[28]=(0,e.eW)(" method will automatically resolve them, and inject them into the target class."))]),s[50]||(s[50]=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> dependencies <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support/container&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">@<span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token string">&#39;storage&#39;</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">TextRecorder</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    storage <span class="token operator">=</span> undeinfed<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">storage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Register binding in the Service Container</span></span>\n<span class="line">container<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">&#39;storage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CookieStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// ...Later in your application</span></span>\n<span class="line"><span class="token keyword">const</span> recorder <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>TextRecorder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>recorder<span class="token punctuation">.</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CookieStorage</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-args-argument" tabindex="-1"><a class="header-anchor" href="#the-args-argument"><span>The <code>args</code> Argument</span></a></h3><p>You can also manually specify what arguments a class constructor or &quot;factory&quot; callback should receive, via the <code>args</code> argument.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> recorder <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>TextRecorder<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">CloudStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>recorder<span class="token punctuation">.</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CloudStorage</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>',4)),(0,e.Lk)("div",p,[s[40]||(s[40]=(0,e.Lk)("p",{class:"hint-container-title"},"warning",-1)),(0,e.Lk)("p",null,[s[30]||(s[30]=(0,e.eW)("When specifying the ")),s[31]||(s[31]=(0,e.Lk)("code",null,"args",-1)),s[32]||(s[32]=(0,e.eW)(" argument for ")),s[33]||(s[33]=(0,e.Lk)("code",null,"make()",-1)),s[34]||(s[34]=(0,e.eW)(", any defined dependencies are ")),s[35]||(s[35]=(0,e.Lk)("strong",null,"overwritten",-1)),s[36]||(s[36]=(0,e.eW)(" by the values in the ")),s[37]||(s[37]=(0,e.Lk)("code",null,"args",-1)),s[38]||(s[38]=(0,e.eW)(" array, if a class constructor is requested resolved! In other words, the binding identifiers defined via the ")),(0,e.bF)(l,{to:"/archive/current/packages/container/dependencies.html"},{default:(0,e.k6)((()=>s[29]||(s[29]=[(0,e.Lk)("code",null,"dependencies",-1),(0,e.eW)(" decorator")]))),_:1}),s[39]||(s[39]=(0,e.eW)(" are ignored."))])]),s[51]||(s[51]=(0,e.Fv)('<h2 id="the-call-method" tabindex="-1"><a class="header-anchor" href="#the-call-method"><span>The <code>call()</code> method</span></a></h2><p>The Service Container can also be used to invoke class methods or callbacks. This allows you to resolve a method&#39;s dependencies and inject them. The <code>call()</code> method accepts the following arguments:</p><ul><li><code>method: Callback | CallbackWrapper | ClassMethodReference</code> - The target callback or class method to invoke.</li><li><code>args: any[] = []</code> - (<em>optional</em>) Eventual arguments to be passed on to class method or callback.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">UsersRepository</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    @<span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token string">&#39;users_api_service&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token parameter">usersService</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...not shown...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Later in your application</span></span>\n<span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">container</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span>UsersRepository<span class="token punctuation">,</span> <span class="token string">&#39;fetchUser&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class-method-reference" tabindex="-1"><a class="header-anchor" href="#class-method-reference"><span>Class Method Reference</span></a></h3><p>A &quot;class method reference&quot; is an array that holds two values:</p><ul><li>A class constructor or object instance.</li><li>The name of the method to be invoked in the target class.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> reference <span class="token operator">=</span> <span class="token punctuation">[</span>AudioPlayer<span class="token punctuation">,</span> <span class="token string">&#39;play&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When given as the <code>method</code> argument, for <code>call()</code>, the target class constructor is automatically resolved (<em>instantiated with eventual dependencies injected</em>). The method is thereafter invoked and output is returned. If the class method has any dependencies defined, then those will be resolved and injected into the method as arguments.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">AudioPlayer</span></span>\n<span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    @<span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token string">&#39;audio_processor&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my_song&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token function">play</span><span class="token punctuation">(</span><span class="token parameter">processor<span class="token punctuation">,</span> song</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...play logic not shown...</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token function">container</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span>AudioPlayer<span class="token punctuation">,</span> <span class="token string">&#39;play&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">warning</p><p>If you specify the <code>args</code> argument for <code>call()</code>, then eventual defined dependencies are <strong>overwritten</strong> with the values provided in the <code>args</code> array. Thus, the dependencies of the class method are ignored.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token function">container</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span></span>\n<span class="line">    <span class="token punctuation">[</span>AudioPlayer<span class="token punctuation">,</span> <span class="token string">&#39;play&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token comment">// Arguments passed on to &quot;play&quot; method.</span></span>\n<span class="line">    <span class="token punctuation">[</span></span>\n<span class="line">        <span class="token keyword">new</span> <span class="token class-name">AudioProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token keyword">new</span> <span class="token class-name">FavouriteSong</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="callback-wrapper" tabindex="-1"><a class="header-anchor" href="#callback-wrapper"><span>Callback Wrapper</span></a></h3>',12)),(0,e.Lk)("p",null,[s[42]||(s[42]=(0,e.eW)("When specifying a ")),(0,e.bF)(l,{to:"/archive/current/packages/support/CallbackWrapper.html"},{default:(0,e.k6)((()=>s[41]||(s[41]=[(0,e.eW)("callback wrapper")]))),_:1}),s[43]||(s[43]=(0,e.eW)(" as target for ")),s[44]||(s[44]=(0,e.Lk)("code",null,"call()",-1)),s[45]||(s[45]=(0,e.eW)(", then the callback will be invoked and eventual output is returned. If the wrapper has arguments specified, then they will automatically be applied, the underlying callback is invoked."))]),s[52]||(s[52]=(0,e.Fv)('<div class="hint-container warning"><p class="hint-container-title">warning</p><p>Providing the <code>args</code> argument for <code>call()</code> will <strong>overwrite</strong> eventual arguments set in the callback wrapper!</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CallbackWrapper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/support&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">firstname<span class="token punctuation">,</span> lastname</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Brian&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jackson&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">container</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>wrapped<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;James&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Brown&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi James Brown</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To define dependencies for a callback wrapper, you must use the wrapper&#39;s <code>set()</code> method and specify an array of target binding identifiers for the <code>DEPENDENCIES</code> symbol as key.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">DEPENDENCIES</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aedart/contracts/container&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> wrapped <span class="token operator">=</span> CallbackWrapper<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">apiClient</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...fetch user logic not shown...</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">return</span> promise<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">DEPENDENCIES</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;api_client&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">container</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>wrapped<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Api Client injected into callback...</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="callback" tabindex="-1"><a class="header-anchor" href="#callback"><span>Callback</span></a></h3><p>The <code>call()</code> can also be used for invoking a regular callback. Any <code>args</code> argument given to <code>call()</code> are passed on to the callback, and eventual output value is returned.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">container</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Limitation</p><p>At the moment, it is not possible to associate dependencies with a native callback directly. Please use a <a href="#callback-wrapper">callback wrapper</a> instead, if you need to inject dependencies into a callback.</p></div><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks"><span>Hooks</span></a></h2><p>If you need to react to components or values that are being resolved from the Service Container, then you can use the <code>before()</code> and <code>after()</code> hook methods.</p><h3 id="before" tabindex="-1"><a class="header-anchor" href="#before"><span><code>before()</code></span></a></h3><p>The <code>before()</code> method registers a callback to be invoked before a binding is resolved.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">identifier<span class="token punctuation">,</span> args<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="after" tabindex="-1"><a class="header-anchor" href="#after"><span><code>after()</code></span></a></h3><p>The <code>after()</code> method registers a callback to be invoked after a binding has been resolved</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">identifier<span class="token punctuation">,</span> resolved<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...not shown...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',15))])}]]);const o=JSON.parse('{"path":"/archive/current/packages/container/resolving.html","title":"Resolving","lang":"en-GB","frontmatter":{"description":"Resolving Dependencies","sidebarDepth":0},"headers":[{"level":2,"title":"The make() method","slug":"the-make-method","link":"#the-make-method","children":[{"level":3,"title":"Dependencies","slug":"dependencies","link":"#dependencies","children":[]},{"level":3,"title":"The args Argument","slug":"the-args-argument","link":"#the-args-argument","children":[]}]},{"level":2,"title":"The call() method","slug":"the-call-method","link":"#the-call-method","children":[{"level":3,"title":"Class Method Reference","slug":"class-method-reference","link":"#class-method-reference","children":[]},{"level":3,"title":"Callback Wrapper","slug":"callback-wrapper","link":"#callback-wrapper","children":[]},{"level":3,"title":"Callback","slug":"callback","link":"#callback","children":[]}]},{"level":2,"title":"Hooks","slug":"hooks","link":"#hooks","children":[{"level":3,"title":"before()","slug":"before","link":"#before","children":[]},{"level":3,"title":"after()","slug":"after","link":"#after","children":[]}]}],"git":{"updatedTime":1712582376000,"contributors":[{"name":"alin","email":"alin@rspsystems.com","commits":3}]},"filePathRelative":"archive/current/packages/container/resolving.md","lastUpdatedDateFormat":"yyyy-MM-dd HH:mm:ss ZZZZ","lastUpdatedDateOptions":{}}')}}]);